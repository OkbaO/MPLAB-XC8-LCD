

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Feb 10 16:44:33 2024

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    41   000000                     
    42                           ; Generated 06/04/2022 GMT
    43                           ; 
    44                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F46K22 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76   000000                     
    77                           	psect	idataBANK0
    78   001C8A                     __pidataBANK0:
    79                           	callstack 0
    80                           
    81                           ;initializer for __XTAL_FREQ
    82   001C8A  1200               	dw	4608
    83   001C8C  007A               	dw	122
    84                           
    85                           	psect	nvBANK0
    86   000092                     __pnvBANK0:
    87                           	callstack 0
    88   000092                     __port:
    89                           	callstack 0
    90   000092                     	ds	2
    91   000094                     _LCD_D7:
    92                           	callstack 0
    93   000094                     	ds	1
    94   000095                     _LCD_D6:
    95                           	callstack 0
    96   000095                     	ds	1
    97   000096                     _LCD_D5:
    98                           	callstack 0
    99   000096                     	ds	1
   100   000097                     _LCD_D4:
   101                           	callstack 0
   102   000097                     	ds	1
   103   000098                     _LCD_EN:
   104                           	callstack 0
   105   000098                     	ds	1
   106   000099                     _LCD_RS:
   107                           	callstack 0
   108   000099                     	ds	1
   109   000000                     _ANSELD	set	3899
   110   000000                     _TRISD	set	3989
   111   000000                     _OSCCON	set	4051
   112   000000                     _PORTD	set	3971
   113                           
   114                           	psect	smallconst
   115   001000                     __psmallconst:
   116                           	callstack 0
   117   001000  00                 	db	0
   118   001001                     STR_1:
   119   001001  48                 	db	72	;'H'
   120   001002  65                 	db	101	;'e'
   121   001003  6C                 	db	108	;'l'
   122   001004  6C                 	db	108	;'l'
   123   001005  6F                 	db	111	;'o'
   124   001006  2C                 	db	44
   125   001007  20                 	db	32
   126   001008  77                 	db	119	;'w'
   127   001009  6F                 	db	111	;'o'
   128   00100A  72                 	db	114	;'r'
   129   00100B  6C                 	db	108	;'l'
   130   00100C  64                 	db	100	;'d'
   131   00100D  21                 	db	33
   132   00100E  00                 	db	0
   133   00100F                     STR_2:
   134   00100F  69                 	db	105	;'i'
   135   001010  20                 	db	32
   136   001011  3D                 	db	61	;'='
   137   001012  20                 	db	32
   138   001013  25                 	db	37
   139   001014  30                 	db	48	;'0'
   140   001015  33                 	db	51	;'3'
   141   001016  75                 	db	117	;'u'
   142   001017  00                 	db	0
   143   001018  00                 	db	0	; dummy byte at the end
   144   000000                     
   145                           ; #config settings
   146                           
   147                           	psect	cinit
   148   001B06                     __pcinit:
   149                           	callstack 0
   150   001B06                     start_initialization:
   151                           	callstack 0
   152   001B06                     __initialization:
   153                           	callstack 0
   154                           
   155                           ; Initialize objects allocated to BANK0 (4 bytes)
   156                           ; load TBLPTR registers with __pidataBANK0
   157   001B06  0E8A               	movlw	low __pidataBANK0
   158   001B08  6EF6               	movwf	tblptrl,c
   159   001B0A  0E1C               	movlw	high __pidataBANK0
   160   001B0C  6EF7               	movwf	tblptrh,c
   161   001B0E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   162   001B10  6EF8               	movwf	tblptru,c
   163   001B12  EE00  F09A         	lfsr	0,__pdataBANK0
   164   001B16  EE10 F004          	lfsr	1,4
   165   001B1A                     copy_data0:
   166   001B1A  0009               	tblrd		*+
   167   001B1C  CFF5 FFEE          	movff	tablat,postinc0
   168   001B20  50E5               	movf	postdec1,w,c
   169   001B22  50E1               	movf	fsr1l,w,c
   170   001B24  E1FA               	bnz	copy_data0
   171                           
   172                           ; Clear objects allocated to BANK0 (38 bytes)
   173   001B26  EE00  F060         	lfsr	0,__pbssBANK0
   174   001B2A  0E26               	movlw	38
   175   001B2C                     clear_0:
   176   001B2C  6AEE               	clrf	postinc0,c
   177   001B2E  06E8               	decf	wreg,f,c
   178   001B30  E1FD               	bnz	clear_0
   179   001B32                     end_of_initialization:
   180                           	callstack 0
   181   001B32                     __end_of__initialization:
   182                           	callstack 0
   183   001B32  0E00               	movlw	low (__Lmediumconst shr (0+16))
   184   001B34  6EF8               	movwf	tblptru,c
   185   001B36  0100               	movlb	0
   186   001B38  EF8E  F00A         	goto	_main	;jump to C main() function
   187                           
   188                           	psect	bssBANK0
   189   000060                     __pbssBANK0:
   190                           	callstack 0
   191   000060                     _width:
   192                           	callstack 0
   193   000060                     	ds	2
   194   000062                     _prec:
   195                           	callstack 0
   196   000062                     	ds	2
   197   000064                     _flags:
   198                           	callstack 0
   199   000064                     	ds	1
   200   000065                     __displaycontrol:
   201                           	callstack 0
   202   000065                     	ds	1
   203   000066                     _dbuf:
   204                           	callstack 0
   205   000066                     	ds	32
   206                           
   207                           	psect	dataBANK0
   208   00009A                     __pdataBANK0:
   209                           	callstack 0
   210   00009A                     __XTAL_FREQ:
   211                           	callstack 0
   212   00009A                     	ds	4
   213                           
   214                           	psect	cstackBANK0
   215   000086                     __pcstackBANK0:
   216                           	callstack 0
   217   000086                     ?_vfprintf:
   218                           	callstack 0
   219   000086                     vfprintf@fp:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x0
   223   000086                     	ds	2
   224   000088                     vfprintf@fmt:
   225                           	callstack 0
   226                           
   227                           ; 2 bytes @ 0x2
   228   000088                     	ds	2
   229   00008A                     vfprintf@ap:
   230                           	callstack 0
   231                           
   232                           ; 2 bytes @ 0x4
   233   00008A                     	ds	2
   234   00008C                     ?_printf:
   235                           	callstack 0
   236   00008C                     printf@fmt:
   237                           	callstack 0
   238                           
   239                           ; 2 bytes @ 0x6
   240   00008C                     	ds	4
   241   000090                     ??_main:
   242                           
   243                           ; 1 bytes @ 0xA
   244   000090                     	ds	2
   245                           
   246                           	psect	cstackCOMRAM
   247   000001                     __pcstackCOMRAM:
   248                           	callstack 0
   249   000001                     ?_isdigit:
   250                           	callstack 0
   251   000001                     ?_isspace:
   252                           	callstack 0
   253   000001                     ?___wmul:
   254                           	callstack 0
   255   000001                     ?___lodiv:
   256                           	callstack 0
   257   000001                     ?___lomod:
   258                           	callstack 0
   259   000001                     WritePin@val:
   260                           	callstack 0
   261   000001                     LCD@_p:
   262                           	callstack 0
   263   000001                     ___wmul@multiplier:
   264                           	callstack 0
   265   000001                     isdigit@c:
   266                           	callstack 0
   267   000001                     isspace@c:
   268                           	callstack 0
   269   000001                     ___lodiv@dividend:
   270                           	callstack 0
   271   000001                     ___lomod@dividend:
   272                           	callstack 0
   273                           
   274                           ; 8 bytes @ 0x0
   275   000001                     	ds	1
   276   000002                     ??_WritePin:
   277                           
   278                           ; 1 bytes @ 0x1
   279   000002                     	ds	1
   280   000003                     ??_isdigit:
   281   000003                     ??_isspace:
   282   000003                     LCD@rs:
   283                           	callstack 0
   284   000003                     ___wmul@multiplicand:
   285                           	callstack 0
   286                           
   287                           ; 2 bytes @ 0x2
   288   000003                     	ds	1
   289   000004                     LCD@en:
   290                           	callstack 0
   291                           
   292                           ; 1 bytes @ 0x3
   293   000004                     	ds	1
   294   000005                     LCD@d4:
   295                           	callstack 0
   296   000005                     WritePin@_pin:
   297                           	callstack 0
   298   000005                     _isspace$718:
   299                           	callstack 0
   300   000005                     ___wmul@product:
   301                           	callstack 0
   302                           
   303                           ; 2 bytes @ 0x4
   304   000005                     	ds	1
   305   000006                     LCD@d5:
   306                           	callstack 0
   307   000006                     WriteNibble@b:
   308                           	callstack 0
   309                           
   310                           ; 1 bytes @ 0x5
   311   000006                     	ds	1
   312   000007                     ?_atoi:
   313                           	callstack 0
   314   000007                     LCD@d6:
   315                           	callstack 0
   316   000007                     WriteByte@b:
   317                           	callstack 0
   318   000007                     atoi@s:
   319                           	callstack 0
   320                           
   321                           ; 2 bytes @ 0x6
   322   000007                     	ds	1
   323   000008                     ??_LCD_Clear:
   324   000008                     LCD@d7:
   325                           	callstack 0
   326   000008                     LCD_Goto@row:
   327                           	callstack 0
   328   000008                     LCD_PutC@c:
   329                           	callstack 0
   330   000008                     LCD_PutS@_str:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x7
   334   000008                     	ds	1
   335   000009                     ??_LCD_Goto:
   336   000009                     ??_atoi:
   337   000009                     putch@c:
   338                           	callstack 0
   339   000009                     LCD_Begin@lines:
   340                           	callstack 0
   341   000009                     ___lodiv@divisor:
   342                           	callstack 0
   343   000009                     ___lomod@divisor:
   344                           	callstack 0
   345                           
   346                           ; 8 bytes @ 0x8
   347   000009                     	ds	1
   348   00000A                     ??_LCD_Begin:
   349   00000A                     ??_LCD_PutS:
   350   00000A                     fputc@c:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x9
   354   00000A                     	ds	1
   355   00000B                     LCD_Goto@col:
   356                           	callstack 0
   357                           
   358                           ; 1 bytes @ 0xA
   359   00000B                     	ds	1
   360   00000C                     LCD_Begin@_function_set:
   361                           	callstack 0
   362   00000C                     LCD_PutS@i:
   363                           	callstack 0
   364   00000C                     atoi@neg:
   365                           	callstack 0
   366   00000C                     fputc@fp:
   367                           	callstack 0
   368                           
   369                           ; 2 bytes @ 0xB
   370   00000C                     	ds	2
   371   00000E                     ??_fputc:
   372   00000E                     atoi@n:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0xD
   376   00000E                     	ds	3
   377   000011                     ___lomod@counter:
   378                           	callstack 0
   379   000011                     ___lodiv@quotient:
   380                           	callstack 0
   381                           
   382                           ; 8 bytes @ 0x10
   383   000011                     	ds	2
   384   000013                     fputs@s:
   385                           	callstack 0
   386                           
   387                           ; 2 bytes @ 0x12
   388   000013                     	ds	2
   389   000015                     fputs@fp:
   390                           	callstack 0
   391                           
   392                           ; 2 bytes @ 0x14
   393   000015                     	ds	2
   394   000017                     fputs@c:
   395                           	callstack 0
   396                           
   397                           ; 1 bytes @ 0x16
   398   000017                     	ds	1
   399   000018                     fputs@i:
   400                           	callstack 0
   401                           
   402                           ; 2 bytes @ 0x17
   403   000018                     	ds	1
   404   000019                     ___lodiv@counter:
   405                           	callstack 0
   406                           
   407                           ; 1 bytes @ 0x18
   408   000019                     	ds	1
   409   00001A                     pad@fp:
   410                           	callstack 0
   411                           
   412                           ; 2 bytes @ 0x19
   413   00001A                     	ds	2
   414   00001C                     pad@buf:
   415                           	callstack 0
   416                           
   417                           ; 2 bytes @ 0x1B
   418   00001C                     	ds	2
   419   00001E                     pad@p:
   420                           	callstack 0
   421                           
   422                           ; 2 bytes @ 0x1D
   423   00001E                     	ds	2
   424   000020                     ??_pad:
   425                           
   426                           ; 1 bytes @ 0x1F
   427   000020                     	ds	1
   428   000021                     pad@i:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0x20
   432   000021                     	ds	2
   433   000023                     pad@w:
   434                           	callstack 0
   435                           
   436                           ; 2 bytes @ 0x22
   437   000023                     	ds	2
   438   000025                     utoa@fp:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x24
   442   000025                     	ds	2
   443   000027                     utoa@d:
   444                           	callstack 0
   445                           
   446                           ; 8 bytes @ 0x26
   447   000027                     	ds	8
   448   00002F                     ??_utoa:
   449                           
   450                           ; 1 bytes @ 0x2E
   451   00002F                     	ds	8
   452   000037                     utoa@p:
   453                           	callstack 0
   454                           
   455                           ; 2 bytes @ 0x36
   456   000037                     	ds	2
   457   000039                     utoa@w:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x38
   461   000039                     	ds	2
   462   00003B                     utoa@n:
   463                           	callstack 0
   464                           
   465                           ; 8 bytes @ 0x3A
   466   00003B                     	ds	8
   467   000043                     utoa@i:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x42
   471   000043                     	ds	2
   472   000045                     vfpfcnvrt@fp:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x44
   476   000045                     	ds	2
   477   000047                     vfpfcnvrt@fmt:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x46
   481   000047                     	ds	2
   482   000049                     vfpfcnvrt@ap:
   483                           	callstack 0
   484                           
   485                           ; 2 bytes @ 0x48
   486   000049                     	ds	2
   487   00004B                     ??_vfpfcnvrt:
   488                           
   489                           ; 1 bytes @ 0x4A
   490   00004B                     	ds	4
   491   00004F                     vfpfcnvrt@convarg:
   492                           	callstack 0
   493                           
   494                           ; 8 bytes @ 0x4E
   495   00004F                     	ds	8
   496   000057                     vfpfcnvrt@done:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0x56
   500   000057                     	ds	2
   501   000059                     vfpfcnvrt@cp:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x58
   505   000059                     	ds	2
   506   00005B                     vfprintf@cfmt:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0x5A
   510   00005B                     	ds	2
   511   00005D                     printf@ap:
   512                           	callstack 0
   513                           
   514                           ; 2 bytes @ 0x5C
   515   00005D                     	ds	2
   516   00005F                     main@i:
   517                           	callstack 0
   518                           
   519                           ; 1 bytes @ 0x5E
   520   00005F                     	ds	1
   521                           
   522 ;;
   523 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   524 ;;
   525 ;; *************** function _main *****************
   526 ;; Defined at:
   527 ;;		line 31 in file "main.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;		None
   530 ;; Auto vars:     Size  Location     Type
   531 ;;  i               1   94[COMRAM] unsigned char 
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   542 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   543 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   544 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   545 ;;Total ram usage:        3 bytes
   546 ;; Hardware stack levels required when called: 13
   547 ;; This function calls:
   548 ;;		_LCD
   549 ;;		_LCD_Begin
   550 ;;		_LCD_Clear
   551 ;;		_LCD_Goto
   552 ;;		_LCD_PutC
   553 ;;		_LCD_PutS
   554 ;;		_printf
   555 ;; This function is called by:
   556 ;;		Startup code after reset
   557 ;; This function uses a non-reentrant model
   558 ;;
   559                           
   560                           	psect	text0
   561   00151C                     __ptext0:
   562                           	callstack 0
   563   00151C                     _main:
   564                           	callstack 18
   565                           
   566                           ;main.c: 33:     OSCCON = 0x6C;
   567                           
   568                           ;incstack = 0
   569   00151C  0E6C               	movlw	108
   570   00151E  6ED3               	movwf	211,c	;volatile
   571                           
   572                           ;main.c: 35:     TRISD = 0;
   573   001520  0E00               	movlw	0
   574   001522  6E95               	movwf	149,c	;volatile
   575                           
   576                           ;main.c: 36:     ANSELD = 0;
   577   001524  0E00               	movlw	0
   578   001526  010F               	movlb	15	; () banked
   579   001528  6F3B               	movwf	59,b	;volatile
   580                           
   581                           ; BSR set to: 15
   582                           ;main.c: 39:     LCD(&PORTD, 0, 1, 2, 3, 4, 5);
   583   00152A  0E83               	movlw	131
   584   00152C  6E01               	movwf	LCD@_p^0,c
   585   00152E  0E0F               	movlw	15
   586   001530  6E02               	movwf	(LCD@_p+1)^0,c
   587   001532  0E00               	movlw	0
   588   001534  6E03               	movwf	LCD@rs^0,c
   589   001536  0E01               	movlw	1
   590   001538  6E04               	movwf	LCD@en^0,c
   591   00153A  0E02               	movlw	2
   592   00153C  6E05               	movwf	LCD@d4^0,c
   593   00153E  0E03               	movlw	3
   594   001540  6E06               	movwf	LCD@d5^0,c
   595   001542  0E04               	movlw	4
   596   001544  6E07               	movwf	LCD@d6^0,c
   597   001546  0E05               	movlw	5
   598   001548  6E08               	movwf	LCD@d7^0,c
   599   00154A  EC1B  F00E         	call	_LCD	;wreg free
   600                           
   601                           ;main.c: 42:     LCD_Begin(16, 2);
   602   00154E  0E02               	movlw	2
   603   001550  6E09               	movwf	LCD_Begin@lines^0,c
   604   001552  0E10               	movlw	16
   605   001554  EC02  F00B         	call	_LCD_Begin
   606                           
   607                           ;main.c: 45:     LCD_Goto(1, 1);
   608   001558  0E01               	movlw	1
   609   00155A  6E08               	movwf	LCD_Goto@row^0,c
   610   00155C  0E01               	movlw	1
   611   00155E  ECA3  F00C         	call	_LCD_Goto
   612                           
   613                           ;main.c: 46:     LCD_PutC('L');
   614   001562  0E4C               	movlw	76
   615   001564  EC2C  F00E         	call	_LCD_PutC
   616                           
   617                           ;main.c: 47:     LCD_PutC('C');
   618   001568  0E43               	movlw	67
   619   00156A  EC2C  F00E         	call	_LCD_PutC
   620                           
   621                           ;main.c: 48:     LCD_PutC('D');
   622   00156E  0E44               	movlw	68
   623   001570  EC2C  F00E         	call	_LCD_PutC
   624                           
   625                           ;main.c: 50:     _delay((unsigned long)((5000)*(_XTAL_FREQ/4000.0)));
   626   001574  0E33               	movlw	51
   627   001576  0100               	movlb	0	; () banked
   628   001578  6F91               	movwf	(??_main+1)& (0+255),b
   629   00157A  0EBB               	movlw	187
   630   00157C  6F90               	movwf	??_main& (0+255),b
   631   00157E  0EDF               	movlw	223
   632   001580                     u2117:
   633   001580  2EE8               	decfsz	wreg,f,c
   634   001582  D7FE               	bra	u2117
   635   001584  2F90               	decfsz	??_main& (0+255),f,b
   636   001586  D7FC               	bra	u2117
   637   001588  2F91               	decfsz	(??_main+1)& (0+255),f,b
   638   00158A  D7FA               	bra	u2117
   639   00158C  D000               	nop2	
   640                           
   641                           ;main.c: 51:     LCD_Clear();
   642   00158E  EC09  F00E         	call	_LCD_Clear	;wreg free
   643                           
   644                           ;main.c: 54:     LCD_Goto(1, 1);
   645   001592  0E01               	movlw	1
   646   001594  6E08               	movwf	LCD_Goto@row^0,c
   647   001596  0E01               	movlw	1
   648   001598  ECA3  F00C         	call	_LCD_Goto
   649                           
   650                           ;main.c: 55:     LCD_PutS("Hello, world!");
   651   00159C  0E01               	movlw	low STR_1
   652   00159E  6E08               	movwf	LCD_PutS@_str^0,c
   653   0015A0  0E10               	movlw	high STR_1
   654   0015A2  6E09               	movwf	(LCD_PutS@_str+1)^0,c
   655   0015A4  ECFD  F00C         	call	_LCD_PutS	;wreg free
   656                           
   657                           ;main.c: 57:     _delay((unsigned long)((5000)*(_XTAL_FREQ/4000.0)));
   658   0015A8  0E33               	movlw	51
   659   0015AA  0100               	movlb	0	; () banked
   660   0015AC  6F91               	movwf	(??_main+1)& (0+255),b
   661   0015AE  0EBB               	movlw	187
   662   0015B0  6F90               	movwf	??_main& (0+255),b
   663   0015B2  0EDF               	movlw	223
   664   0015B4                     u2127:
   665   0015B4  2EE8               	decfsz	wreg,f,c
   666   0015B6  D7FE               	bra	u2127
   667   0015B8  2F90               	decfsz	??_main& (0+255),f,b
   668   0015BA  D7FC               	bra	u2127
   669   0015BC  2F91               	decfsz	(??_main+1)& (0+255),f,b
   670   0015BE  D7FA               	bra	u2127
   671   0015C0  D000               	nop2	
   672                           
   673                           ;main.c: 60:     uint8_t i = 0;
   674   0015C2  0E00               	movlw	0
   675   0015C4  6E5F               	movwf	main@i^0,c
   676   0015C6                     l2237:
   677                           
   678                           ;main.c: 62:     {;main.c: 63:         LCD_Goto(1, 2);
   679   0015C6  0E02               	movlw	2
   680   0015C8  6E08               	movwf	LCD_Goto@row^0,c
   681   0015CA  0E01               	movlw	1
   682   0015CC  ECA3  F00C         	call	_LCD_Goto
   683                           
   684                           ;main.c: 64:         printf("i = %03u", i);
   685   0015D0  0E0F               	movlw	low STR_2
   686   0015D2  0100               	movlb	0	; () banked
   687   0015D4  6F8C               	movwf	printf@fmt& (0+255),b
   688   0015D6  0E10               	movlw	high STR_2
   689   0015D8  6F8D               	movwf	(printf@fmt+1)& (0+255),b
   690   0015DA  C05F  F08E         	movff	main@i,?_printf+2
   691   0015DE  6B8F               	clrf	(?_printf+3)& (0+255),b
   692   0015E0  ECD0  F00D         	call	_printf	;wreg free
   693                           
   694                           ;main.c: 65:         i = i + 1;
   695   0015E4  285F               	incf	main@i^0,w,c
   696   0015E6  6E5F               	movwf	main@i^0,c
   697                           
   698                           ;main.c: 66:         _delay((unsigned long)((1000)*(_XTAL_FREQ/4000.0)));
   699   0015E8  0E0B               	movlw	11
   700   0015EA  0100               	movlb	0	; () banked
   701   0015EC  6F91               	movwf	(??_main+1)& (0+255),b
   702   0015EE  0E26               	movlw	38
   703   0015F0  6F90               	movwf	??_main& (0+255),b
   704   0015F2  0E5D               	movlw	93
   705   0015F4                     u2137:
   706   0015F4  2EE8               	decfsz	wreg,f,c
   707   0015F6  D7FE               	bra	u2137
   708   0015F8  2F90               	decfsz	??_main& (0+255),f,b
   709   0015FA  D7FC               	bra	u2137
   710   0015FC  2F91               	decfsz	(??_main+1)& (0+255),f,b
   711   0015FE  D7FA               	bra	u2137
   712   001600  D000               	nop2	
   713   001602  D7E1               	goto	l2237
   714   001604                     __end_of_main:
   715                           	callstack 0
   716                           
   717 ;; *************** function _printf *****************
   718 ;; Defined at:
   719 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\printf.c"
   720 ;; Parameters:    Size  Location     Type
   721 ;;  fmt             2    6[BANK0 ] PTR const unsigned char 
   722 ;;		 -> STR_2(9), 
   723 ;; Auto vars:     Size  Location     Type
   724 ;;  ap              2   92[COMRAM] PTR void [1]
   725 ;;		 -> ?_printf(2), 
   726 ;;  ret             2    0        int 
   727 ;; Return value:  Size  Location     Type
   728 ;;                  2    6[BANK0 ] int 
   729 ;; Registers used:
   730 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   731 ;; Tracked objects:
   732 ;;		On entry : 0/0
   733 ;;		On exit  : 0/0
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   736 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   737 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   739 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   740 ;;Total ram usage:        6 bytes
   741 ;; Hardware stack levels used: 1
   742 ;; Hardware stack levels required when called: 12
   743 ;; This function calls:
   744 ;;		_vfprintf
   745 ;; This function is called by:
   746 ;;		_main
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750                           	psect	text1
   751   001BA0                     __ptext1:
   752                           	callstack 0
   753   001BA0                     _printf:
   754                           	callstack 18
   755                           
   756                           ;incstack = 0
   757   001BA0  0E8E               	movlw	low (?_printf+2)
   758   001BA2  6E5D               	movwf	printf@ap^0,c
   759   001BA4  0E00               	movlw	high (?_printf+2)
   760   001BA6  6E5E               	movwf	(printf@ap+1)^0,c
   761   001BA8  0E00               	movlw	0
   762   001BAA  0100               	movlb	0	; () banked
   763   001BAC  6F86               	movwf	vfprintf@fp& (0+255),b
   764   001BAE  0E00               	movlw	0
   765   001BB0  6F87               	movwf	(vfprintf@fp+1)& (0+255),b
   766   001BB2  C08C  F088         	movff	printf@fmt,vfprintf@fmt
   767   001BB6  C08D  F089         	movff	printf@fmt+1,vfprintf@fmt+1
   768   001BBA  0E5D               	movlw	low printf@ap
   769   001BBC  6F8A               	movwf	vfprintf@ap& (0+255),b
   770   001BBE  0E00               	movlw	high printf@ap
   771   001BC0  6F8B               	movwf	(vfprintf@ap+1)& (0+255),b
   772   001BC2  EC25  F00D         	call	_vfprintf	;wreg free
   773   001BC6  0012               	return		;funcret
   774   001BC8                     __end_of_printf:
   775                           	callstack 0
   776                           
   777 ;; *************** function _vfprintf *****************
   778 ;; Defined at:
   779 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
   782 ;;		 -> NULL(0), 
   783 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
   784 ;;		 -> STR_2(9), 
   785 ;;  ap              2    4[BANK0 ] PTR PTR void 
   786 ;;		 -> printf@ap(2), 
   787 ;; Auto vars:     Size  Location     Type
   788 ;;  cfmt            2   90[COMRAM] PTR unsigned char 
   789 ;;		 -> STR_2(9), 
   790 ;; Return value:  Size  Location     Type
   791 ;;                  2    0[BANK0 ] int 
   792 ;; Registers used:
   793 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   794 ;; Tracked objects:
   795 ;;		On entry : 0/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   799 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   802 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   803 ;;Total ram usage:        8 bytes
   804 ;; Hardware stack levels used: 1
   805 ;; Hardware stack levels required when called: 11
   806 ;; This function calls:
   807 ;;		_vfpfcnvrt
   808 ;; This function is called by:
   809 ;;		_printf
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text2
   814   001A4A                     __ptext2:
   815                           	callstack 0
   816   001A4A                     _vfprintf:
   817                           	callstack 18
   818                           
   819                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
   820                           
   821                           ;incstack = 0
   822   001A4A  C088  F05B         	movff	vfprintf@fmt,vfprintf@cfmt
   823   001A4E  C089  F05C         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   824                           
   825                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   826   001A52  D00E               	goto	l2109
   827   001A54                     l2107:
   828                           
   829                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   830   001A54  C086  F045         	movff	vfprintf@fp,vfpfcnvrt@fp
   831   001A58  C087  F046         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   832   001A5C  0E5B               	movlw	low vfprintf@cfmt
   833   001A5E  6E47               	movwf	vfpfcnvrt@fmt^0,c
   834   001A60  0E00               	movlw	high vfprintf@cfmt
   835   001A62  6E48               	movwf	(vfpfcnvrt@fmt+1)^0,c
   836   001A64  C08A  F049         	movff	vfprintf@ap,vfpfcnvrt@ap
   837   001A68  C08B  F04A         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   838   001A6C  EC0D  F008         	call	_vfpfcnvrt	;wreg free
   839   001A70                     l2109:
   840                           
   841                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   842   001A70  C05B  FFF6         	movff	vfprintf@cfmt,tblptrl
   843   001A74  C05C  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   844   001A78                     	if	0	;tblptru may be non-zero
   845   001A78                     	endif
   846   001A78                     	if	0	;tblptru may be non-zero
   847   001A78                     	endif
   848   001A78  0008               	tblrd		*
   849   001A7A  50F5               	movf	tablat,w,c
   850   001A7C  0900               	iorlw	0
   851   001A7E  A4D8               	btfss	status,2,c
   852   001A80  D7E9               	goto	l2107
   853                           
   854                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
   855   001A82  0E00               	movlw	0
   856   001A84  0100               	movlb	0	; () banked
   857   001A86  6F87               	movwf	(?_vfprintf+1)& (0+255),b
   858   001A88  0E00               	movlw	0
   859   001A8A  6F86               	movwf	?_vfprintf& (0+255),b
   860                           
   861                           ; BSR set to: 0
   862   001A8C  0012               	return		;funcret
   863   001A8E                     __end_of_vfprintf:
   864                           	callstack 0
   865                           
   866 ;; *************** function _vfpfcnvrt *****************
   867 ;; Defined at:
   868 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;  fp              2   68[COMRAM] PTR struct _IO_FILE
   871 ;;		 -> NULL(0), 
   872 ;;  fmt             2   70[COMRAM] PTR PTR unsigned char 
   873 ;;		 -> vfprintf@cfmt(2), 
   874 ;;  ap              2   72[COMRAM] PTR PTR void 
   875 ;;		 -> printf@ap(2), 
   876 ;; Auto vars:     Size  Location     Type
   877 ;;  convarg         8   78[COMRAM] struct .
   878 ;;  cp              2   88[COMRAM] PTR unsigned char 
   879 ;;		 -> STR_2(9), 
   880 ;;  done            2   86[COMRAM] int 
   881 ;;  i               2    0        int 
   882 ;;  c               1    0        unsigned char 
   883 ;; Return value:  Size  Location     Type
   884 ;;                  1    wreg      void 
   885 ;; Registers used:
   886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   892 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   893 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   894 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   895 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   896 ;;Total ram usage:       22 bytes
   897 ;; Hardware stack levels used: 1
   898 ;; Hardware stack levels required when called: 10
   899 ;; This function calls:
   900 ;;		_atoi
   901 ;;		_fputc
   902 ;;		_isdigit
   903 ;;		_utoa
   904 ;; This function is called by:
   905 ;;		_vfprintf
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           	psect	text3
   910   00101A                     __ptext3:
   911                           	callstack 0
   912   00101A                     _vfpfcnvrt:
   913                           	callstack 18
   914                           
   915                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
   916                           
   917                           ; BSR set to: 0
   918                           ;incstack = 0
   919   00101A  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   920   00101E  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   921   001022  CFDE FFF6          	movff	postinc2,tblptrl
   922   001026  CFDD FFF7          	movff	postdec2,tblptrh
   923   00102A                     	if	0	;tblptru may be non-zero
   924   00102A                     	endif
   925   00102A                     	if	0	;tblptru may be non-zero
   926   00102A                     	endif
   927   00102A  0008               	tblrd		*
   928   00102C  50F5               	movf	tablat,w,c
   929   00102E  0A25               	xorlw	37
   930   001030  A4D8               	btfss	status,2,c
   931   001032  D107               	goto	l2087
   932                           
   933                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
   934   001034  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   935   001038  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   936   00103C  2ADE               	incf	postinc2,f,c
   937   00103E  0E00               	movlw	0
   938   001040  22DD               	addwfc	postdec2,f,c
   939                           
   940                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
   941   001042  0E00               	movlw	0
   942   001044  0100               	movlb	0	; () banked
   943   001046  6F61               	movwf	(_width+1)& (0+255),b
   944   001048  0E00               	movlw	0
   945   00104A  6F60               	movwf	_width& (0+255),b
   946   00104C  C060  F064         	movff	_width,_flags
   947                           
   948                           ; BSR set to: 0
   949                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
   950   001050  6962               	setf	_prec& (0+255),b
   951   001052  6963               	setf	(_prec+1)& (0+255),b
   952                           
   953                           ; BSR set to: 0
   954                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1027:         don
      +                          e = 0;
   955   001054  0E00               	movlw	0
   956   001056  6E58               	movwf	(vfpfcnvrt@done+1)^0,c
   957   001058  0E00               	movlw	0
   958   00105A  D00D               	goto	L1
   959   00105C                     l2041:
   960                           
   961                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1038:            
      +                                   flags |= (1 << 1);
   962   00105C  0100               	movlb	0	; () banked
   963   00105E  8364               	bsf	_flags& (0+255),1,b
   964                           
   965                           ; BSR set to: 0
   966                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1039:            
      +                                   ++*fmt;
   967   001060  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   968   001064  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   969   001068  2ADE               	incf	postinc2,f,c
   970   00106A  0E00               	movlw	0
   971   00106C  22DD               	addwfc	postdec2,f,c
   972                           
   973                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1040:            
      +                                   break;
   974   00106E  D01A               	goto	l2051
   975   001070                     l2045:
   976                           
   977                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1061:            
      +                                   done = 1;
   978   001070  0E00               	movlw	0
   979   001072  6E58               	movwf	(vfpfcnvrt@done+1)^0,c
   980   001074  0E01               	movlw	1
   981   001076                     L1:
   982   001076  6E57               	movwf	vfpfcnvrt@done^0,c
   983                           
   984                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1062:            
      +                                   break;
   985   001078  D015               	goto	l2051
   986   00107A                     l2049:
   987   00107A  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   988   00107E  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   989   001082  CFDE FFF6          	movff	postinc2,tblptrl
   990   001086  CFDD FFF7          	movff	postdec2,tblptrh
   991   00108A                     	if	0	;tblptru may be non-zero
   992   00108A                     	endif
   993   00108A                     	if	0	;tblptru may be non-zero
   994   00108A                     	endif
   995   00108A  0008               	tblrd		*
   996   00108C  50F5               	movf	tablat,w,c
   997   00108E  6E4B               	movwf	??_vfpfcnvrt^0,c
   998   001090  6A4C               	clrf	(??_vfpfcnvrt+1)^0,c
   999                           
  1000                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1001                           ; Switch size 1, requested type "simple"
  1002                           ; Number of cases is 1, Range of values is 0 to 0
  1003                           ; switch strategies available:
  1004                           ; Name         Instructions Cycles
  1005                           ; simple_byte            4     3 (average)
  1006                           ;	Chosen strategy is simple_byte
  1007   001092  504C               	movf	(??_vfpfcnvrt+1)^0,w,c
  1008   001094  0A00               	xorlw	0	; case 0
  1009   001096  A4D8               	btfss	status,2,c
  1010   001098  D7EB               	goto	l2045
  1011                           
  1012                           ; Switch size 1, requested type "simple"
  1013                           ; Number of cases is 1, Range of values is 48 to 48
  1014                           ; switch strategies available:
  1015                           ; Name         Instructions Cycles
  1016                           ; simple_byte            4     3 (average)
  1017                           ;	Chosen strategy is simple_byte
  1018   00109A  504B               	movf	??_vfpfcnvrt^0,w,c
  1019   00109C  0A30               	xorlw	48	; case 48
  1020   00109E  B4D8               	btfsc	status,2,c
  1021   0010A0  D7DD               	goto	l2041
  1022   0010A2  D7E6               	goto	l2045
  1023   0010A4                     l2051:
  1024                           
  1025                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
  1026   0010A4  5057               	movf	vfpfcnvrt@done^0,w,c
  1027   0010A6  1058               	iorwf	(vfpfcnvrt@done+1)^0,w,c
  1028   0010A8  B4D8               	btfsc	status,2,c
  1029   0010AA  D7E7               	goto	l2049
  1030                           
  1031                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1074:         if 
      +                          ((*fmt)[0] == '*') {
  1032   0010AC  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1033   0010B0  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1034   0010B4  CFDE FFF6          	movff	postinc2,tblptrl
  1035   0010B8  CFDD FFF7          	movff	postdec2,tblptrh
  1036   0010BC                     	if	0	;tblptru may be non-zero
  1037   0010BC                     	endif
  1038   0010BC                     	if	0	;tblptru may be non-zero
  1039   0010BC                     	endif
  1040   0010BC  0008               	tblrd		*
  1041   0010BE  50F5               	movf	tablat,w,c
  1042   0010C0  0A2A               	xorlw	42
  1043   0010C2  A4D8               	btfss	status,2,c
  1044   0010C4  D024               	goto	l2061
  1045                           
  1046                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1075:            
      +                           ++*fmt;
  1047   0010C6  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1048   0010CA  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1049   0010CE  2ADE               	incf	postinc2,f,c
  1050   0010D0  0E00               	movlw	0
  1051   0010D2  22DD               	addwfc	postdec2,f,c
  1052                           
  1053                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1076:            
      +                           width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1054   0010D4  C049  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1055   0010D8  C04A  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1056   0010DC  CFDF F04B          	movff	indf2,??_vfpfcnvrt
  1057   0010E0  0E02               	movlw	2
  1058   0010E2  26DE               	addwf	postinc2,f,c
  1059   0010E4  CFDF F04C          	movff	indf2,??_vfpfcnvrt+1
  1060   0010E8  0E00               	movlw	0
  1061   0010EA  22DD               	addwfc	postdec2,f,c
  1062   0010EC  C04B  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1063   0010F0  C04C  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1064   0010F4  CFDE F060          	movff	postinc2,_width
  1065   0010F8  CFDD F061          	movff	postdec2,_width+1
  1066                           
  1067                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1077:            
      +                           if (width < 0) {
  1068   0010FC  0100               	movlb	0	; () banked
  1069   0010FE  AF61               	btfss	(_width+1)& (0+255),7,b
  1070   001100  D033               	goto	u1440
  1071                           
  1072                           ; BSR set to: 0
  1073                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1078:            
      +                               flags |= (1 << 0);
  1074   001102  8164               	bsf	_flags& (0+255),0,b
  1075                           
  1076                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1079:            
      +                               width = -width;
  1077   001104  6D60               	negf	_width& (0+255),b
  1078   001106  1F61               	comf	(_width+1)& (0+255),f,b
  1079   001108  B0D8               	btfsc	status,0,c
  1080   00110A  2B61               	incf	(_width+1)& (0+255),f,b
  1081   00110C  D02D               	goto	u1440
  1082   00110E                     l2061:
  1083                           
  1084                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1082:            
      +                           width = atoi(*fmt);
  1085   00110E  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1086   001112  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1087   001116  CFDE F007          	movff	postinc2,atoi@s
  1088   00111A  CFDD F008          	movff	postdec2,atoi@s+1
  1089   00111E  EC08  F00A         	call	_atoi	;wreg free
  1090   001122  C007  F060         	movff	?_atoi,_width
  1091   001126  C008  F061         	movff	?_atoi+1,_width+1
  1092                           
  1093                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1083:            
      +                           while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  1094   00112A  D007               	goto	l2067
  1095   00112C                     l2063:
  1096                           
  1097                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1084:            
      +                               ++*fmt;
  1098   00112C  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1099   001130  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1100   001134  2ADE               	incf	postinc2,f,c
  1101   001136  0E00               	movlw	0
  1102   001138  22DD               	addwfc	postdec2,f,c
  1103   00113A                     l2067:
  1104   00113A  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1105   00113E  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1106   001142  CFDE FFF6          	movff	postinc2,tblptrl
  1107   001146  CFDD FFF7          	movff	postdec2,tblptrh
  1108   00114A                     	if	0	;tblptru may be non-zero
  1109   00114A                     	endif
  1110   00114A                     	if	0	;tblptru may be non-zero
  1111   00114A                     	endif
  1112   00114A  0008               	tblrd		*
  1113   00114C  CFF5 F04B          	movff	tablat,??_vfpfcnvrt
  1114   001150  0ED0               	movlw	208
  1115   001152  244B               	addwf	??_vfpfcnvrt^0,w,c
  1116   001154  6E4C               	movwf	(??_vfpfcnvrt+1)^0,c
  1117   001156  6A4D               	clrf	(??_vfpfcnvrt+2)^0,c
  1118   001158  0EFF               	movlw	255
  1119   00115A  224D               	addwfc	(??_vfpfcnvrt+2)^0,f,c
  1120   00115C  504D               	movf	(??_vfpfcnvrt+2)^0,w,c
  1121   00115E  E104               	bnz	u1440
  1122   001160  0E0A               	movlw	10
  1123   001162  5C4C               	subwf	(??_vfpfcnvrt+1)^0,w,c
  1124   001164  A0D8               	btfss	status,0,c
  1125   001166  D7E2               	goto	l2063
  1126   001168                     u1440:
  1127                           
  1128                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1239:   if (0
  1129   001168  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1130   00116C  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1131   001170  CFDE F059          	movff	postinc2,vfpfcnvrt@cp
  1132   001174  CFDD F05A          	movff	postdec2,vfpfcnvrt@cp+1
  1133   001178  C059  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1134   00117C  C05A  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1135   001180                     	if	0	;tblptru may be non-zero
  1136   001180                     	endif
  1137   001180                     	if	0	;tblptru may be non-zero
  1138   001180                     	endif
  1139   001180  0008               	tblrd		*
  1140   001182  50F5               	movf	tablat,w,c
  1141   001184  0A75               	xorlw	117
  1142   001186  A4D8               	btfss	status,2,c
  1143   001188  D054               	goto	l2083
  1144                           
  1145                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1252:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1295:    convarg.llu 
      +                          = (unsigned long long)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (un
      +                          signed int)0));
  1146   00118A  C049  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1147   00118E  C04A  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1148   001192  CFDF F04B          	movff	indf2,??_vfpfcnvrt
  1149   001196  0E02               	movlw	2
  1150   001198  26DE               	addwf	postinc2,f,c
  1151   00119A  CFDF F04C          	movff	indf2,??_vfpfcnvrt+1
  1152   00119E  0E00               	movlw	0
  1153   0011A0  22DD               	addwfc	postdec2,f,c
  1154   0011A2  C04B  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1155   0011A6  C04C  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1156   0011AA  CFDE F04D          	movff	postinc2,??_vfpfcnvrt+2
  1157   0011AE  CFDD F04E          	movff	postdec2,??_vfpfcnvrt+3
  1158   0011B2  C04D  F04F         	movff	??_vfpfcnvrt+2,vfpfcnvrt@convarg
  1159   0011B6  C04E  F050         	movff	??_vfpfcnvrt+3,vfpfcnvrt@convarg+1
  1160   0011BA  6A51               	clrf	(vfpfcnvrt@convarg+2)^0,c
  1161   0011BC  6A52               	clrf	(vfpfcnvrt@convarg+3)^0,c
  1162   0011BE  6A53               	clrf	(vfpfcnvrt@convarg+4)^0,c
  1163   0011C0  6A54               	clrf	(vfpfcnvrt@convarg+5)^0,c
  1164   0011C2  6A55               	clrf	(vfpfcnvrt@convarg+6)^0,c
  1165   0011C4  6A56               	clrf	(vfpfcnvrt@convarg+7)^0,c
  1166                           
  1167                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1297:    *fmt = c
      +                          p+1;
  1168   0011C6  0E01               	movlw	1
  1169   0011C8  2459               	addwf	vfpfcnvrt@cp^0,w,c
  1170   0011CA  6E4B               	movwf	??_vfpfcnvrt^0,c
  1171   0011CC  0E00               	movlw	0
  1172   0011CE  205A               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1173   0011D0  6E4C               	movwf	(??_vfpfcnvrt+1)^0,c
  1174   0011D2  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1175   0011D6  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1176   0011DA  C04B  FFDE         	movff	??_vfpfcnvrt,postinc2
  1177   0011DE  C04C  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1178                           
  1179                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1298:    switch (
      +                          *cp) {
  1180   0011E2  D017               	goto	l2081
  1181   0011E4                     l2075:
  1182                           
  1183                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1305:      return
      +                           (void) utoa(fp, convarg.llu);;	Return value of _vfpfcnvrt is never used
  1184   0011E4  C045  F025         	movff	vfpfcnvrt@fp,utoa@fp
  1185   0011E8  C046  F026         	movff	vfpfcnvrt@fp+1,utoa@fp+1
  1186   0011EC  C04F  F027         	movff	vfpfcnvrt@convarg,utoa@d
  1187   0011F0  C050  F028         	movff	vfpfcnvrt@convarg+1,utoa@d+1
  1188   0011F4  C051  F029         	movff	vfpfcnvrt@convarg+2,utoa@d+2
  1189   0011F8  C052  F02A         	movff	vfpfcnvrt@convarg+3,utoa@d+3
  1190   0011FC  C053  F02B         	movff	vfpfcnvrt@convarg+4,utoa@d+4
  1191   001200  C054  F02C         	movff	vfpfcnvrt@convarg+5,utoa@d+5
  1192   001204  C055  F02D         	movff	vfpfcnvrt@convarg+6,utoa@d+6
  1193   001208  C056  F02E         	movff	vfpfcnvrt@convarg+7,utoa@d+7
  1194   00120C  EC34  F009         	call	_utoa	;wreg free
  1195   001210  0012               	return	
  1196   001212                     l2081:
  1197   001212  C059  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1198   001216  C05A  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1199   00121A                     	if	0	;tblptru may be non-zero
  1200   00121A                     	endif
  1201   00121A                     	if	0	;tblptru may be non-zero
  1202   00121A                     	endif
  1203   00121A  0008               	tblrd		*
  1204   00121C  50F5               	movf	tablat,w,c
  1205   00121E  6E4B               	movwf	??_vfpfcnvrt^0,c
  1206   001220  6A4C               	clrf	(??_vfpfcnvrt+1)^0,c
  1207                           
  1208                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1209                           ; Switch size 1, requested type "simple"
  1210                           ; Number of cases is 1, Range of values is 0 to 0
  1211                           ; switch strategies available:
  1212                           ; Name         Instructions Cycles
  1213                           ; simple_byte            4     3 (average)
  1214                           ;	Chosen strategy is simple_byte
  1215   001222  504C               	movf	(??_vfpfcnvrt+1)^0,w,c
  1216   001224  0A00               	xorlw	0	; case 0
  1217   001226  A4D8               	btfss	status,2,c
  1218   001228  D004               	goto	l2083
  1219                           
  1220                           ; Switch size 1, requested type "simple"
  1221                           ; Number of cases is 1, Range of values is 117 to 117
  1222                           ; switch strategies available:
  1223                           ; Name         Instructions Cycles
  1224                           ; simple_byte            4     3 (average)
  1225                           ;	Chosen strategy is simple_byte
  1226   00122A  504B               	movf	??_vfpfcnvrt^0,w,c
  1227   00122C  0A75               	xorlw	117	; case 117
  1228   00122E  B4D8               	btfsc	status,2,c
  1229   001230  D7D9               	goto	l2075
  1230   001232                     l2083:
  1231                           
  1232                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1233   001232  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1234   001236  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1235   00123A  2ADE               	incf	postinc2,f,c
  1236   00123C  0E00               	movlw	0
  1237   00123E  22DD               	addwfc	postdec2,f,c
  1238   001240  0012               	return	
  1239   001242                     l2087:
  1240                           
  1241                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1242   001242  C047  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1243   001246  C048  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1244   00124A  CFDE FFF6          	movff	postinc2,tblptrl
  1245   00124E  CFDD FFF7          	movff	postdec2,tblptrh
  1246   001252                     	if	0	;tblptru may be non-zero
  1247   001252                     	endif
  1248   001252                     	if	0	;tblptru may be non-zero
  1249   001252                     	endif
  1250   001252  0008               	tblrd		*
  1251   001254  50F5               	movf	tablat,w,c
  1252   001256  6E0A               	movwf	fputc@c^0,c
  1253   001258  6A0B               	clrf	(fputc@c+1)^0,c
  1254   00125A  C045  F00C         	movff	vfpfcnvrt@fp,fputc@fp
  1255   00125E  C046  F00D         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1256   001262  EC6D  F00C         	call	_fputc	;wreg free
  1257   001266  D7E5               	goto	l2083
  1258   001268                     __end_of_vfpfcnvrt:
  1259                           	callstack 0
  1260                           
  1261 ;; *************** function _utoa *****************
  1262 ;; Defined at:
  1263 ;;		line 894 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;  fp              2   36[COMRAM] PTR struct _IO_FILE
  1266 ;;		 -> NULL(0), 
  1267 ;;  d               8   38[COMRAM] unsigned long long 
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;  n               8   58[COMRAM] unsigned long long 
  1270 ;;  i               2   66[COMRAM] int 
  1271 ;;  w               2   56[COMRAM] int 
  1272 ;;  p               2   54[COMRAM] int 
  1273 ;; Return value:  Size  Location     Type
  1274 ;;                  1    wreg      void 
  1275 ;; Registers used:
  1276 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1282 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1283 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1284 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1285 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1286 ;;Total ram usage:       32 bytes
  1287 ;; Hardware stack levels used: 1
  1288 ;; Hardware stack levels required when called: 9
  1289 ;; This function calls:
  1290 ;;		___lodiv
  1291 ;;		___lomod
  1292 ;;		_pad
  1293 ;; This function is called by:
  1294 ;;		_vfpfcnvrt
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           	psect	text4
  1299   001268                     __ptext4:
  1300                           	callstack 0
  1301   001268                     _utoa:
  1302                           	callstack 18
  1303                           
  1304                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 894: static void 
      +                          utoa(FILE *fp, unsigned long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c9
      +                          9\common\doprnt.c: 895: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\do
      +                          prnt.c: 896:     int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\commo
      +                          n\doprnt.c: 897:     unsigned long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sour
      +                          ces\c99\common\doprnt.c: 901:     if (!(prec < 0)) {
  1305                           
  1306                           ;incstack = 0
  1307   001268  0100               	movlb	0	; () banked
  1308   00126A  AF63               	btfss	(_prec+1)& (0+255),7,b
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 902:         flag
      +                          s &= ~(1 << 1);
  1312   00126C  9364               	bcf	_flags& (0+255),1,b
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 905:     p = (0 <
      +                           prec) ? prec : 1;
  1316   00126E  BF63               	btfsc	(_prec+1)& (0+255),7,b
  1317   001270  D005               	goto	u1300
  1318   001272  5163               	movf	(_prec+1)& (0+255),w,b
  1319   001274  E108               	bnz	l855
  1320   001276  0562               	decf	_prec& (0+255),w,b
  1321   001278  B0D8               	btfsc	status,0,c
  1322   00127A  D005               	goto	l855
  1323   00127C                     u1300:
  1324                           
  1325                           ; BSR set to: 0
  1326   00127C  0E00               	movlw	0
  1327   00127E  6E38               	movwf	(utoa@p+1)^0,c
  1328   001280  0E01               	movlw	1
  1329   001282  6E37               	movwf	utoa@p^0,c
  1330   001284  D004               	goto	l857
  1331   001286                     l855:
  1332                           
  1333                           ; BSR set to: 0
  1334   001286  C062  F037         	movff	_prec,utoa@p
  1335   00128A  C063  F038         	movff	_prec+1,utoa@p+1
  1336   00128E                     l857:
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 906:     w = widt
      +                          h;
  1340   00128E  C060  F039         	movff	_width,utoa@w
  1341   001292  C061  F03A         	movff	_width+1,utoa@w+1
  1342                           
  1343                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 909:     n = d;
  1344   001296  C027  F03B         	movff	utoa@d,utoa@n
  1345   00129A  C028  F03C         	movff	utoa@d+1,utoa@n+1
  1346   00129E  C029  F03D         	movff	utoa@d+2,utoa@n+2
  1347   0012A2  C02A  F03E         	movff	utoa@d+3,utoa@n+3
  1348   0012A6  C02B  F03F         	movff	utoa@d+4,utoa@n+4
  1349   0012AA  C02C  F040         	movff	utoa@d+5,utoa@n+5
  1350   0012AE  C02D  F041         	movff	utoa@d+6,utoa@n+6
  1351   0012B2  C02E  F042         	movff	utoa@d+7,utoa@n+7
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 910:     i = size
      +                          of(dbuf) - 1;
  1355   0012B6  0E00               	movlw	0
  1356   0012B8  6E44               	movwf	(utoa@i+1)^0,c
  1357   0012BA  0E1F               	movlw	31
  1358   0012BC  6E43               	movwf	utoa@i^0,c
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 911:     dbuf[i] 
      +                          = '\0';
  1362   0012BE  0E00               	movlw	0
  1363   0012C0  6F85               	movwf	(_dbuf+31)& (0+255),b
  1364                           
  1365                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 912:     while (i
      +                           && (n || (0 < p)
  1366   0012C2  D076               	goto	l1985
  1367   0012C4                     l1975:
  1368                           
  1369                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 916:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 917:         --i;
  1370   0012C4  0643               	decf	utoa@i^0,f,c
  1371   0012C6  A0D8               	btfss	status,0,c
  1372   0012C8  0644               	decf	(utoa@i+1)^0,f,c
  1373                           
  1374                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 918:         dbuf
      +                          [i] = '0' + (n % 10);
  1375   0012CA  0E66               	movlw	low _dbuf
  1376   0012CC  2443               	addwf	utoa@i^0,w,c
  1377   0012CE  6ED9               	movwf	fsr2l,c
  1378   0012D0  0E00               	movlw	high _dbuf
  1379   0012D2  2044               	addwfc	(utoa@i+1)^0,w,c
  1380   0012D4  6EDA               	movwf	fsr2h,c
  1381   0012D6  C03B  F001         	movff	utoa@n,___lomod@dividend
  1382   0012DA  C03C  F002         	movff	utoa@n+1,___lomod@dividend+1
  1383   0012DE  C03D  F003         	movff	utoa@n+2,___lomod@dividend+2
  1384   0012E2  C03E  F004         	movff	utoa@n+3,___lomod@dividend+3
  1385   0012E6  C03F  F005         	movff	utoa@n+4,___lomod@dividend+4
  1386   0012EA  C040  F006         	movff	utoa@n+5,___lomod@dividend+5
  1387   0012EE  C041  F007         	movff	utoa@n+6,___lomod@dividend+6
  1388   0012F2  C042  F008         	movff	utoa@n+7,___lomod@dividend+7
  1389   0012F6  0E0A               	movlw	10
  1390   0012F8  6E09               	movwf	___lomod@divisor^0,c
  1391   0012FA  0E00               	movlw	0
  1392   0012FC  6E0A               	movwf	(___lomod@divisor+1)^0,c
  1393   0012FE  0E00               	movlw	0
  1394   001300  6E0B               	movwf	(___lomod@divisor+2)^0,c
  1395   001302  0E00               	movlw	0
  1396   001304  6E0C               	movwf	(___lomod@divisor+3)^0,c
  1397   001306  0E00               	movlw	0
  1398   001308  6E0D               	movwf	(___lomod@divisor+4)^0,c
  1399   00130A  0E00               	movlw	0
  1400   00130C  6E0E               	movwf	(___lomod@divisor+5)^0,c
  1401   00130E  0E00               	movlw	0
  1402   001310  6E0F               	movwf	(___lomod@divisor+6)^0,c
  1403   001312  0E00               	movlw	0
  1404   001314  6E10               	movwf	(___lomod@divisor+7)^0,c
  1405   001316  ECD5  F00B         	call	___lomod	;wreg free
  1406   00131A  C001  F02F         	movff	?___lomod,??_utoa
  1407   00131E  C002  F030         	movff	?___lomod+1,??_utoa+1
  1408   001322  C003  F031         	movff	?___lomod+2,??_utoa+2
  1409   001326  C004  F032         	movff	?___lomod+3,??_utoa+3
  1410   00132A  C005  F033         	movff	?___lomod+4,??_utoa+4
  1411   00132E  C006  F034         	movff	?___lomod+5,??_utoa+5
  1412   001332  C007  F035         	movff	?___lomod+6,??_utoa+6
  1413   001336  C008  F036         	movff	?___lomod+7,??_utoa+7
  1414   00133A  502F               	movf	??_utoa^0,w,c
  1415   00133C  0F30               	addlw	48
  1416   00133E  6EDF               	movwf	indf2,c
  1417                           
  1418                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 919:         --p;
  1419   001340  0637               	decf	utoa@p^0,f,c
  1420   001342  A0D8               	btfss	status,0,c
  1421   001344  0638               	decf	(utoa@p+1)^0,f,c
  1422                           
  1423                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 920:         --w;
  1424   001346  0639               	decf	utoa@w^0,f,c
  1425   001348  A0D8               	btfss	status,0,c
  1426   00134A  063A               	decf	(utoa@w+1)^0,f,c
  1427                           
  1428                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 921:         n = 
      +                          n / 10;
  1429   00134C  C03B  F001         	movff	utoa@n,___lodiv@dividend
  1430   001350  C03C  F002         	movff	utoa@n+1,___lodiv@dividend+1
  1431   001354  C03D  F003         	movff	utoa@n+2,___lodiv@dividend+2
  1432   001358  C03E  F004         	movff	utoa@n+3,___lodiv@dividend+3
  1433   00135C  C03F  F005         	movff	utoa@n+4,___lodiv@dividend+4
  1434   001360  C040  F006         	movff	utoa@n+5,___lodiv@dividend+5
  1435   001364  C041  F007         	movff	utoa@n+6,___lodiv@dividend+6
  1436   001368  C042  F008         	movff	utoa@n+7,___lodiv@dividend+7
  1437   00136C  0E0A               	movlw	10
  1438   00136E  6E09               	movwf	___lodiv@divisor^0,c
  1439   001370  0E00               	movlw	0
  1440   001372  6E0A               	movwf	(___lodiv@divisor+1)^0,c
  1441   001374  0E00               	movlw	0
  1442   001376  6E0B               	movwf	(___lodiv@divisor+2)^0,c
  1443   001378  0E00               	movlw	0
  1444   00137A  6E0C               	movwf	(___lodiv@divisor+3)^0,c
  1445   00137C  0E00               	movlw	0
  1446   00137E  6E0D               	movwf	(___lodiv@divisor+4)^0,c
  1447   001380  0E00               	movlw	0
  1448   001382  6E0E               	movwf	(___lodiv@divisor+5)^0,c
  1449   001384  0E00               	movlw	0
  1450   001386  6E0F               	movwf	(___lodiv@divisor+6)^0,c
  1451   001388  0E00               	movlw	0
  1452   00138A  6E10               	movwf	(___lodiv@divisor+7)^0,c
  1453   00138C  EC6E  F00B         	call	___lodiv	;wreg free
  1454   001390  C001  F03B         	movff	?___lodiv,utoa@n
  1455   001394  C002  F03C         	movff	?___lodiv+1,utoa@n+1
  1456   001398  C003  F03D         	movff	?___lodiv+2,utoa@n+2
  1457   00139C  C004  F03E         	movff	?___lodiv+3,utoa@n+3
  1458   0013A0  C005  F03F         	movff	?___lodiv+4,utoa@n+4
  1459   0013A4  C006  F040         	movff	?___lodiv+5,utoa@n+5
  1460   0013A8  C007  F041         	movff	?___lodiv+6,utoa@n+6
  1461   0013AC  C008  F042         	movff	?___lodiv+7,utoa@n+7
  1462   0013B0                     l1985:
  1463                           
  1464                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 912:     while (i
      +                           && (n || (0 < p)
  1465   0013B0  5043               	movf	utoa@i^0,w,c
  1466   0013B2  1044               	iorwf	(utoa@i+1)^0,w,c
  1467   0013B4  B4D8               	btfsc	status,2,c
  1468   0013B6  D01B               	goto	u1350
  1469   0013B8  503B               	movf	utoa@n^0,w,c
  1470   0013BA  103C               	iorwf	(utoa@n+1)^0,w,c
  1471   0013BC  103D               	iorwf	(utoa@n+2)^0,w,c
  1472   0013BE  103E               	iorwf	(utoa@n+3)^0,w,c
  1473   0013C0  103F               	iorwf	(utoa@n+4)^0,w,c
  1474   0013C2  1040               	iorwf	(utoa@n+5)^0,w,c
  1475   0013C4  1041               	iorwf	(utoa@n+6)^0,w,c
  1476   0013C6  1042               	iorwf	(utoa@n+7)^0,w,c
  1477   0013C8  A4D8               	btfss	status,2,c
  1478   0013CA  D77C               	goto	l1975
  1479   0013CC  BE38               	btfsc	(utoa@p+1)^0,7,c
  1480   0013CE  D005               	goto	u1330
  1481   0013D0  5038               	movf	(utoa@p+1)^0,w,c
  1482   0013D2  E102               	bnz	u1331
  1483   0013D4  0437               	decf	utoa@p^0,w,c
  1484   0013D6  B0D8               	btfsc	status,0,c
  1485   0013D8                     u1331:
  1486   0013D8  D775               	goto	l1975
  1487   0013DA                     u1330:
  1488   0013DA  BE3A               	btfsc	(utoa@w+1)^0,7,c
  1489   0013DC  D008               	goto	u1350
  1490   0013DE  503A               	movf	(utoa@w+1)^0,w,c
  1491   0013E0  E103               	bnz	u1340
  1492   0013E2  0439               	decf	utoa@w^0,w,c
  1493   0013E4  A0D8               	btfss	status,0,c
  1494   0013E6  D003               	goto	u1350
  1495   0013E8                     u1340:
  1496   0013E8  0100               	movlb	0	; () banked
  1497   0013EA  B364               	btfsc	_flags& (0+255),1,b
  1498   0013EC  D76B               	goto	l1975
  1499   0013EE                     u1350:
  1500                           
  1501                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 925:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1502   0013EE  C025  F01A         	movff	utoa@fp,pad@fp
  1503   0013F2  C026  F01B         	movff	utoa@fp+1,pad@fp+1
  1504   0013F6  0E66               	movlw	low _dbuf
  1505   0013F8  2443               	addwf	utoa@i^0,w,c
  1506   0013FA  6E1C               	movwf	pad@buf^0,c
  1507   0013FC  0E00               	movlw	high _dbuf
  1508   0013FE  2044               	addwfc	(utoa@i+1)^0,w,c
  1509   001400  6E1D               	movwf	(pad@buf+1)^0,c
  1510   001402  C039  F01E         	movff	utoa@w,pad@p
  1511   001406  C03A  F01F         	movff	utoa@w+1,pad@p+1
  1512   00140A  EC2C  F00C         	call	_pad	;wreg free
  1513   00140E  0012               	return		;funcret
  1514   001410                     __end_of_utoa:
  1515                           	callstack 0
  1516                           
  1517 ;; *************** function _pad *****************
  1518 ;; Defined at:
  1519 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  fp              2   25[COMRAM] PTR struct _IO_FILE
  1522 ;;		 -> NULL(0), 
  1523 ;;  buf             2   27[COMRAM] PTR unsigned char 
  1524 ;;		 -> dbuf(32), 
  1525 ;;  p               2   29[COMRAM] int 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  w               2   34[COMRAM] int 
  1528 ;;  i               2   32[COMRAM] int 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      void 
  1531 ;; Registers used:
  1532 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1538 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1539 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1540 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;Total ram usage:       11 bytes
  1543 ;; Hardware stack levels used: 1
  1544 ;; Hardware stack levels required when called: 8
  1545 ;; This function calls:
  1546 ;;		_fputc
  1547 ;;		_fputs
  1548 ;; This function is called by:
  1549 ;;		_utoa
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           	psect	text5
  1554   001858                     __ptext5:
  1555                           	callstack 0
  1556   001858                     _pad:
  1557                           	callstack 18
  1558                           
  1559                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 139:     if (flags & (1 << 0)) {
  1560                           
  1561                           ;incstack = 0
  1562   001858  0100               	movlb	0	; () banked
  1563   00185A  A164               	btfss	_flags& (0+255),0,b
  1564   00185C  D00A               	goto	l1933
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 140:         fput
      +                          s((const char *)buf, fp);
  1568   00185E  C01C  F013         	movff	pad@buf,fputs@s
  1569   001862  C01D  F014         	movff	pad@buf+1,fputs@s+1
  1570   001866  C01A  F015         	movff	pad@fp,fputs@fp
  1571   00186A  C01B  F016         	movff	pad@fp+1,fputs@fp+1
  1572   00186E  EC67  F00D         	call	_fputs	;wreg free
  1573   001872                     l1933:
  1574                           
  1575                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 145:     w = (p <
      +                           0) ? 0 : p;
  1576   001872  BE1F               	btfsc	(pad@p+1)^0,7,c
  1577   001874  D005               	goto	l1937
  1578   001876  C01E  F023         	movff	pad@p,pad@w
  1579   00187A  C01F  F024         	movff	pad@p+1,pad@w+1
  1580   00187E  D004               	goto	l845
  1581   001880                     l1937:
  1582   001880  0E00               	movlw	0
  1583   001882  6E24               	movwf	(pad@w+1)^0,c
  1584   001884  0E00               	movlw	0
  1585   001886  6E23               	movwf	pad@w^0,c
  1586   001888                     l845:
  1587                           
  1588                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  1589   001888  0E00               	movlw	0
  1590   00188A  6E22               	movwf	(pad@i+1)^0,c
  1591   00188C  0E00               	movlw	0
  1592   00188E  6E21               	movwf	pad@i^0,c
  1593                           
  1594                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1595   001890  D00C               	goto	l1943
  1596   001892                     l1939:
  1597                           
  1598                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  1599   001892  0E00               	movlw	0
  1600   001894  6E0B               	movwf	(fputc@c+1)^0,c
  1601   001896  0E20               	movlw	32
  1602   001898  6E0A               	movwf	fputc@c^0,c
  1603   00189A  C01A  F00C         	movff	pad@fp,fputc@fp
  1604   00189E  C01B  F00D         	movff	pad@fp+1,fputc@fp+1
  1605   0018A2  EC6D  F00C         	call	_fputc	;wreg free
  1606                           
  1607                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  1608   0018A6  4A21               	infsnz	pad@i^0,f,c
  1609   0018A8  2A22               	incf	(pad@i+1)^0,f,c
  1610   0018AA                     l1943:
  1611                           
  1612                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1613   0018AA  5023               	movf	pad@w^0,w,c
  1614   0018AC  5C21               	subwf	pad@i^0,w,c
  1615   0018AE  5022               	movf	(pad@i+1)^0,w,c
  1616   0018B0  0A80               	xorlw	128
  1617   0018B2  6E20               	movwf	??_pad^0,c
  1618   0018B4  5024               	movf	(pad@w+1)^0,w,c
  1619   0018B6  0A80               	xorlw	128
  1620   0018B8  5820               	subwfb	??_pad^0,w,c
  1621   0018BA  A0D8               	btfss	status,0,c
  1622   0018BC  D7EA               	goto	l1939
  1623                           
  1624                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 154:     if (!(fl
      +                          ags & (1 << 0))) {
  1625   0018BE  0100               	movlb	0	; () banked
  1626   0018C0  B164               	btfsc	_flags& (0+255),0,b
  1627   0018C2  0012               	return	
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  1631   0018C4  C01C  F013         	movff	pad@buf,fputs@s
  1632   0018C8  C01D  F014         	movff	pad@buf+1,fputs@s+1
  1633   0018CC  C01A  F015         	movff	pad@fp,fputs@fp
  1634   0018D0  C01B  F016         	movff	pad@fp+1,fputs@fp+1
  1635   0018D4  EC67  F00D         	call	_fputs	;wreg free
  1636   0018D8  0012               	return		;funcret
  1637   0018DA                     __end_of_pad:
  1638                           	callstack 0
  1639                           
  1640 ;; *************** function _fputs *****************
  1641 ;; Defined at:
  1642 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  s               2   18[COMRAM] PTR const unsigned char 
  1645 ;;		 -> dbuf(32), 
  1646 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  1647 ;;		 -> NULL(0), 
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;  i               2   23[COMRAM] int 
  1650 ;;  c               1   22[COMRAM] unsigned char 
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  2   18[COMRAM] int 
  1653 ;; Registers used:
  1654 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1660 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1661 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1663 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;Total ram usage:        7 bytes
  1665 ;; Hardware stack levels used: 1
  1666 ;; Hardware stack levels required when called: 7
  1667 ;; This function calls:
  1668 ;;		_fputc
  1669 ;; This function is called by:
  1670 ;;		_pad
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           	psect	text6
  1675   001ACE                     __ptext6:
  1676                           	callstack 0
  1677   001ACE                     _fputs:
  1678                           	callstack 18
  1679                           
  1680                           ;incstack = 0
  1681   001ACE  0E00               	movlw	0
  1682   001AD0  6E19               	movwf	(fputs@i+1)^0,c
  1683   001AD2  0E00               	movlw	0
  1684   001AD4  6E18               	movwf	fputs@i^0,c
  1685   001AD6  D00B               	goto	l1883
  1686   001AD8                     l1879:
  1687   001AD8  C017  F00A         	movff	fputs@c,fputc@c
  1688   001ADC  6A0B               	clrf	(fputc@c+1)^0,c
  1689   001ADE  C015  F00C         	movff	fputs@fp,fputc@fp
  1690   001AE2  C016  F00D         	movff	fputs@fp+1,fputc@fp+1
  1691   001AE6  EC6D  F00C         	call	_fputc	;wreg free
  1692   001AEA  4A18               	infsnz	fputs@i^0,f,c
  1693   001AEC  2A19               	incf	(fputs@i+1)^0,f,c
  1694   001AEE                     l1883:
  1695   001AEE  5018               	movf	fputs@i^0,w,c
  1696   001AF0  2413               	addwf	fputs@s^0,w,c
  1697   001AF2  6ED9               	movwf	fsr2l,c
  1698   001AF4  5019               	movf	(fputs@i+1)^0,w,c
  1699   001AF6  2014               	addwfc	(fputs@s+1)^0,w,c
  1700   001AF8  6EDA               	movwf	fsr2h,c
  1701   001AFA  50DF               	movf	indf2,w,c
  1702   001AFC  6E17               	movwf	fputs@c^0,c
  1703   001AFE  5017               	movf	fputs@c^0,w,c
  1704   001B00  B4D8               	btfsc	status,2,c
  1705   001B02  0012               	return	
  1706   001B04  D7E9               	goto	l1879
  1707   001B06                     __end_of_fputs:
  1708                           	callstack 0
  1709                           
  1710 ;; *************** function _fputc *****************
  1711 ;; Defined at:
  1712 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;  c               2    9[COMRAM] int 
  1715 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1716 ;;		 -> NULL(0), 
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;		None
  1719 ;; Return value:  Size  Location     Type
  1720 ;;                  2    9[COMRAM] int 
  1721 ;; Registers used:
  1722 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1723 ;; Tracked objects:
  1724 ;;		On entry : 0/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1728 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;Total ram usage:        9 bytes
  1733 ;; Hardware stack levels used: 1
  1734 ;; Hardware stack levels required when called: 6
  1735 ;; This function calls:
  1736 ;;		_putch
  1737 ;; This function is called by:
  1738 ;;		_pad
  1739 ;;		_vfpfcnvrt
  1740 ;;		_fputs
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text7
  1745   0018DA                     __ptext7:
  1746                           	callstack 0
  1747   0018DA                     _fputc:
  1748                           	callstack 18
  1749                           
  1750                           ;incstack = 0
  1751   0018DA  500C               	movf	fputc@fp^0,w,c
  1752   0018DC  100D               	iorwf	(fputc@fp+1)^0,w,c
  1753   0018DE  B4D8               	btfsc	status,2,c
  1754   0018E0  D004               	goto	u1100
  1755   0018E2  500C               	movf	fputc@fp^0,w,c
  1756   0018E4  100D               	iorwf	(fputc@fp+1)^0,w,c
  1757   0018E6  A4D8               	btfss	status,2,c
  1758   0018E8  D004               	goto	l1869
  1759   0018EA                     u1100:
  1760   0018EA  500A               	movf	fputc@c^0,w,c
  1761   0018EC  EC40  F00E         	call	_putch
  1762   0018F0  0012               	return	
  1763   0018F2                     l1869:
  1764   0018F2  EE20 F009          	lfsr	2,9
  1765   0018F6  500C               	movf	fputc@fp^0,w,c
  1766   0018F8  26D9               	addwf	fsr2l,f,c
  1767   0018FA  500D               	movf	(fputc@fp+1)^0,w,c
  1768   0018FC  22DA               	addwfc	fsr2h,f,c
  1769   0018FE  50DE               	movf	postinc2,w,c
  1770   001900  10DE               	iorwf	postinc2,w,c
  1771   001902  B4D8               	btfsc	status,2,c
  1772   001904  D016               	goto	u1120
  1773   001906  EE20 F009          	lfsr	2,9
  1774   00190A  500C               	movf	fputc@fp^0,w,c
  1775   00190C  26D9               	addwf	fsr2l,f,c
  1776   00190E  500D               	movf	(fputc@fp+1)^0,w,c
  1777   001910  22DA               	addwfc	fsr2h,f,c
  1778   001912  EE10 F003          	lfsr	1,3
  1779   001916  500C               	movf	fputc@fp^0,w,c
  1780   001918  26E1               	addwf	fsr1l,f,c
  1781   00191A  500D               	movf	(fputc@fp+1)^0,w,c
  1782   00191C  22E2               	addwfc	fsr1h,f,c
  1783   00191E  50DE               	movf	postinc2,w,c
  1784   001920  5CE6               	subwf	postinc1,w,c
  1785   001922  50E6               	movf	postinc1,w,c
  1786   001924  0A80               	xorlw	128
  1787   001926  6E12               	movwf	(??_fputc+4)^0,c
  1788   001928  50DE               	movf	postinc2,w,c
  1789   00192A  0A80               	xorlw	128
  1790   00192C  5812               	subwfb	(??_fputc+4)^0,w,c
  1791   00192E  B0D8               	btfsc	status,0,c
  1792   001930  0012               	return	
  1793   001932                     u1120:
  1794   001932  EE20 F003          	lfsr	2,3
  1795   001936  500C               	movf	fputc@fp^0,w,c
  1796   001938  26D9               	addwf	fsr2l,f,c
  1797   00193A  500D               	movf	(fputc@fp+1)^0,w,c
  1798   00193C  22DA               	addwfc	fsr2h,f,c
  1799   00193E  2ADE               	incf	postinc2,f,c
  1800   001940  0E00               	movlw	0
  1801   001942  22DD               	addwfc	postdec2,f,c
  1802   001944  0012               	return		;funcret
  1803   001946                     __end_of_fputc:
  1804                           	callstack 0
  1805                           
  1806 ;; *************** function _putch *****************
  1807 ;; Defined at:
  1808 ;;		line 25 in file "main.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  c               1    wreg     unsigned char 
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;  c               1    8[COMRAM] unsigned char 
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;Total ram usage:        1 bytes
  1827 ;; Hardware stack levels used: 1
  1828 ;; Hardware stack levels required when called: 5
  1829 ;; This function calls:
  1830 ;;		_LCD_PutC
  1831 ;; This function is called by:
  1832 ;;		_fputc
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           	psect	text8
  1837   001C80                     __ptext8:
  1838                           	callstack 0
  1839   001C80                     _putch:
  1840                           	callstack 18
  1841                           
  1842                           ;incstack = 0
  1843                           ;putch@c stored from wreg
  1844   001C80  6E09               	movwf	putch@c^0,c
  1845                           
  1846                           ;main.c: 25: void putch(char c);main.c: 26: {;main.c: 27:     LCD_PutC(c);
  1847   001C82  5009               	movf	putch@c^0,w,c
  1848   001C84  EC2C  F00E         	call	_LCD_PutC
  1849   001C88  0012               	return		;funcret
  1850   001C8A                     __end_of_putch:
  1851                           	callstack 0
  1852                           
  1853 ;; *************** function _LCD_PutC *****************
  1854 ;; Defined at:
  1855 ;;		line 96 in file "../lcd.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;  c               1    wreg     unsigned char 
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;  c               1    7[COMRAM] unsigned char 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1870 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1872 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1873 ;;Total ram usage:        1 bytes
  1874 ;; Hardware stack levels used: 1
  1875 ;; Hardware stack levels required when called: 4
  1876 ;; This function calls:
  1877 ;;		_WriteByte
  1878 ;;		_WritePin
  1879 ;; This function is called by:
  1880 ;;		_putch
  1881 ;;		_main
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885                           	psect	text9
  1886   001C58                     __ptext9:
  1887                           	callstack 0
  1888   001C58                     _LCD_PutC:
  1889                           	callstack 18
  1890                           
  1891                           ;incstack = 0
  1892                           ;LCD_PutC@c stored from wreg
  1893   001C58  6E08               	movwf	LCD_PutC@c^0,c
  1894                           
  1895                           ;../lcd.c: 96: void LCD_PutC(char c);../lcd.c: 97: {;../lcd.c: 98:     WritePin(LCD_RS, 
      +                          1);
  1896   001C5A  0E01               	movlw	1
  1897   001C5C  6E01               	movwf	WritePin@val^0,c
  1898   001C5E  0100               	movlb	0	; () banked
  1899   001C60  5199               	movf	_LCD_RS& (0+255),w,b
  1900   001C62  ECD4  F00C         	call	_WritePin
  1901                           
  1902                           ;../lcd.c: 99:     WriteByte(c);
  1903   001C66  5008               	movf	LCD_PutC@c^0,w,c
  1904   001C68  EC37  F00E         	call	_WriteByte
  1905   001C6C  0012               	return		;funcret
  1906   001C6E                     __end_of_LCD_PutC:
  1907                           	callstack 0
  1908                           
  1909 ;; *************** function ___lomod *****************
  1910 ;; Defined at:
  1911 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lomod.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;  dividend        8    0[COMRAM] unsigned long long 
  1914 ;;  divisor         8    8[COMRAM] unsigned long long 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  counter         1   16[COMRAM] unsigned char 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  8    0[COMRAM] unsigned long long 
  1919 ;; Registers used:
  1920 ;;		wreg, status,2, status,0
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1926 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;Total ram usage:       17 bytes
  1931 ;; Hardware stack levels used: 1
  1932 ;; This function calls:
  1933 ;;		Nothing
  1934 ;; This function is called by:
  1935 ;;		_utoa
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text10
  1940   0017AA                     __ptext10:
  1941                           	callstack 0
  1942   0017AA                     ___lomod:
  1943                           	callstack 26
  1944                           
  1945                           ;incstack = 0
  1946   0017AA  5009               	movf	___lomod@divisor^0,w,c
  1947   0017AC  100A               	iorwf	(___lomod@divisor+1)^0,w,c
  1948   0017AE  100B               	iorwf	(___lomod@divisor+2)^0,w,c
  1949   0017B0  100C               	iorwf	(___lomod@divisor+3)^0,w,c
  1950   0017B2  100D               	iorwf	(___lomod@divisor+4)^0,w,c
  1951   0017B4  100E               	iorwf	(___lomod@divisor+5)^0,w,c
  1952   0017B6  100F               	iorwf	(___lomod@divisor+6)^0,w,c
  1953   0017B8  1010               	iorwf	(___lomod@divisor+7)^0,w,c
  1954   0017BA  B4D8               	btfsc	status,2,c
  1955   0017BC  D03C               	goto	l590
  1956   0017BE  0E01               	movlw	1
  1957   0017C0  6E11               	movwf	___lomod@counter^0,c
  1958   0017C2  D00A               	goto	l1919
  1959   0017C4                     l1917:
  1960   0017C4  90D8               	bcf	status,0,c
  1961   0017C6  3609               	rlcf	___lomod@divisor^0,f,c
  1962   0017C8  360A               	rlcf	(___lomod@divisor+1)^0,f,c
  1963   0017CA  360B               	rlcf	(___lomod@divisor+2)^0,f,c
  1964   0017CC  360C               	rlcf	(___lomod@divisor+3)^0,f,c
  1965   0017CE  360D               	rlcf	(___lomod@divisor+4)^0,f,c
  1966   0017D0  360E               	rlcf	(___lomod@divisor+5)^0,f,c
  1967   0017D2  360F               	rlcf	(___lomod@divisor+6)^0,f,c
  1968   0017D4  3610               	rlcf	(___lomod@divisor+7)^0,f,c
  1969   0017D6  2A11               	incf	___lomod@counter^0,f,c
  1970   0017D8                     l1919:
  1971   0017D8  AE10               	btfss	(___lomod@divisor+7)^0,7,c
  1972   0017DA  D7F4               	goto	l1917
  1973   0017DC                     u1190:
  1974   0017DC  5009               	movf	___lomod@divisor^0,w,c
  1975   0017DE  5C01               	subwf	___lomod@dividend^0,w,c
  1976   0017E0  500A               	movf	(___lomod@divisor+1)^0,w,c
  1977   0017E2  5802               	subwfb	(___lomod@dividend+1)^0,w,c
  1978   0017E4  500B               	movf	(___lomod@divisor+2)^0,w,c
  1979   0017E6  5803               	subwfb	(___lomod@dividend+2)^0,w,c
  1980   0017E8  500C               	movf	(___lomod@divisor+3)^0,w,c
  1981   0017EA  5804               	subwfb	(___lomod@dividend+3)^0,w,c
  1982   0017EC  500D               	movf	(___lomod@divisor+4)^0,w,c
  1983   0017EE  5805               	subwfb	(___lomod@dividend+4)^0,w,c
  1984   0017F0  500E               	movf	(___lomod@divisor+5)^0,w,c
  1985   0017F2  5806               	subwfb	(___lomod@dividend+5)^0,w,c
  1986   0017F4  500F               	movf	(___lomod@divisor+6)^0,w,c
  1987   0017F6  5807               	subwfb	(___lomod@dividend+6)^0,w,c
  1988   0017F8  5010               	movf	(___lomod@divisor+7)^0,w,c
  1989   0017FA  5808               	subwfb	(___lomod@dividend+7)^0,w,c
  1990   0017FC  A0D8               	btfss	status,0,c
  1991   0017FE  D010               	goto	l1925
  1992   001800  5009               	movf	___lomod@divisor^0,w,c
  1993   001802  5E01               	subwf	___lomod@dividend^0,f,c
  1994   001804  500A               	movf	(___lomod@divisor+1)^0,w,c
  1995   001806  5A02               	subwfb	(___lomod@dividend+1)^0,f,c
  1996   001808  500B               	movf	(___lomod@divisor+2)^0,w,c
  1997   00180A  5A03               	subwfb	(___lomod@dividend+2)^0,f,c
  1998   00180C  500C               	movf	(___lomod@divisor+3)^0,w,c
  1999   00180E  5A04               	subwfb	(___lomod@dividend+3)^0,f,c
  2000   001810  500D               	movf	(___lomod@divisor+4)^0,w,c
  2001   001812  5A05               	subwfb	(___lomod@dividend+4)^0,f,c
  2002   001814  500E               	movf	(___lomod@divisor+5)^0,w,c
  2003   001816  5A06               	subwfb	(___lomod@dividend+5)^0,f,c
  2004   001818  500F               	movf	(___lomod@divisor+6)^0,w,c
  2005   00181A  5A07               	subwfb	(___lomod@dividend+6)^0,f,c
  2006   00181C  5010               	movf	(___lomod@divisor+7)^0,w,c
  2007   00181E  5A08               	subwfb	(___lomod@dividend+7)^0,f,c
  2008   001820                     l1925:
  2009   001820  90D8               	bcf	status,0,c
  2010   001822  3210               	rrcf	(___lomod@divisor+7)^0,f,c
  2011   001824  320F               	rrcf	(___lomod@divisor+6)^0,f,c
  2012   001826  320E               	rrcf	(___lomod@divisor+5)^0,f,c
  2013   001828  320D               	rrcf	(___lomod@divisor+4)^0,f,c
  2014   00182A  320C               	rrcf	(___lomod@divisor+3)^0,f,c
  2015   00182C  320B               	rrcf	(___lomod@divisor+2)^0,f,c
  2016   00182E  320A               	rrcf	(___lomod@divisor+1)^0,f,c
  2017   001830  3209               	rrcf	___lomod@divisor^0,f,c
  2018   001832  2E11               	decfsz	___lomod@counter^0,f,c
  2019   001834  D7D3               	goto	u1190
  2020   001836                     l590:
  2021   001836  C001  F001         	movff	___lomod@dividend,?___lomod
  2022   00183A  C002  F002         	movff	___lomod@dividend+1,?___lomod+1
  2023   00183E  C003  F003         	movff	___lomod@dividend+2,?___lomod+2
  2024   001842  C004  F004         	movff	___lomod@dividend+3,?___lomod+3
  2025   001846  C005  F005         	movff	___lomod@dividend+4,?___lomod+4
  2026   00184A  C006  F006         	movff	___lomod@dividend+5,?___lomod+5
  2027   00184E  C007  F007         	movff	___lomod@dividend+6,?___lomod+6
  2028   001852  C008  F008         	movff	___lomod@dividend+7,?___lomod+7
  2029   001856  0012               	return		;funcret
  2030   001858                     __end_of___lomod:
  2031                           	callstack 0
  2032                           
  2033 ;; *************** function ___lodiv *****************
  2034 ;; Defined at:
  2035 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lodiv.c"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;  dividend        8    0[COMRAM] unsigned long long 
  2038 ;;  divisor         8    8[COMRAM] unsigned long long 
  2039 ;; Auto vars:     Size  Location     Type
  2040 ;;  quotient        8   16[COMRAM] unsigned long long 
  2041 ;;  counter         1   24[COMRAM] unsigned char 
  2042 ;; Return value:  Size  Location     Type
  2043 ;;                  8    0[COMRAM] unsigned long long 
  2044 ;; Registers used:
  2045 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2051 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2052 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2054 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2055 ;;Total ram usage:       25 bytes
  2056 ;; Hardware stack levels used: 1
  2057 ;; This function calls:
  2058 ;;		Nothing
  2059 ;; This function is called by:
  2060 ;;		_utoa
  2061 ;; This function uses a non-reentrant model
  2062 ;;
  2063                           
  2064                           	psect	text11
  2065   0016DC                     __ptext11:
  2066                           	callstack 0
  2067   0016DC                     ___lodiv:
  2068                           	callstack 26
  2069                           
  2070                           ;incstack = 0
  2071   0016DC  EE20  F011         	lfsr	2,___lodiv@quotient
  2072   0016E0  0E07               	movlw	7
  2073   0016E2                     u1141:
  2074   0016E2  6ADE               	clrf	postinc2,c
  2075   0016E4  06E8               	decf	wreg,f,c
  2076   0016E6  E2FD               	bc	u1141
  2077   0016E8  5009               	movf	___lodiv@divisor^0,w,c
  2078   0016EA  100A               	iorwf	(___lodiv@divisor+1)^0,w,c
  2079   0016EC  100B               	iorwf	(___lodiv@divisor+2)^0,w,c
  2080   0016EE  100C               	iorwf	(___lodiv@divisor+3)^0,w,c
  2081   0016F0  100D               	iorwf	(___lodiv@divisor+4)^0,w,c
  2082   0016F2  100E               	iorwf	(___lodiv@divisor+5)^0,w,c
  2083   0016F4  100F               	iorwf	(___lodiv@divisor+6)^0,w,c
  2084   0016F6  1010               	iorwf	(___lodiv@divisor+7)^0,w,c
  2085   0016F8  B4D8               	btfsc	status,2,c
  2086   0016FA  D046               	goto	l580
  2087   0016FC  0E01               	movlw	1
  2088   0016FE  6E19               	movwf	___lodiv@counter^0,c
  2089   001700  D00A               	goto	l1899
  2090   001702                     l1897:
  2091   001702  90D8               	bcf	status,0,c
  2092   001704  3609               	rlcf	___lodiv@divisor^0,f,c
  2093   001706  360A               	rlcf	(___lodiv@divisor+1)^0,f,c
  2094   001708  360B               	rlcf	(___lodiv@divisor+2)^0,f,c
  2095   00170A  360C               	rlcf	(___lodiv@divisor+3)^0,f,c
  2096   00170C  360D               	rlcf	(___lodiv@divisor+4)^0,f,c
  2097   00170E  360E               	rlcf	(___lodiv@divisor+5)^0,f,c
  2098   001710  360F               	rlcf	(___lodiv@divisor+6)^0,f,c
  2099   001712  3610               	rlcf	(___lodiv@divisor+7)^0,f,c
  2100   001714  2A19               	incf	___lodiv@counter^0,f,c
  2101   001716                     l1899:
  2102   001716  AE10               	btfss	(___lodiv@divisor+7)^0,7,c
  2103   001718  D7F4               	goto	l1897
  2104   00171A                     u1160:
  2105   00171A  90D8               	bcf	status,0,c
  2106   00171C  3611               	rlcf	___lodiv@quotient^0,f,c
  2107   00171E  3612               	rlcf	(___lodiv@quotient+1)^0,f,c
  2108   001720  3613               	rlcf	(___lodiv@quotient+2)^0,f,c
  2109   001722  3614               	rlcf	(___lodiv@quotient+3)^0,f,c
  2110   001724  3615               	rlcf	(___lodiv@quotient+4)^0,f,c
  2111   001726  3616               	rlcf	(___lodiv@quotient+5)^0,f,c
  2112   001728  3617               	rlcf	(___lodiv@quotient+6)^0,f,c
  2113   00172A  3618               	rlcf	(___lodiv@quotient+7)^0,f,c
  2114   00172C  5009               	movf	___lodiv@divisor^0,w,c
  2115   00172E  5C01               	subwf	___lodiv@dividend^0,w,c
  2116   001730  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2117   001732  5802               	subwfb	(___lodiv@dividend+1)^0,w,c
  2118   001734  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2119   001736  5803               	subwfb	(___lodiv@dividend+2)^0,w,c
  2120   001738  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2121   00173A  5804               	subwfb	(___lodiv@dividend+3)^0,w,c
  2122   00173C  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2123   00173E  5805               	subwfb	(___lodiv@dividend+4)^0,w,c
  2124   001740  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2125   001742  5806               	subwfb	(___lodiv@dividend+5)^0,w,c
  2126   001744  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2127   001746  5807               	subwfb	(___lodiv@dividend+6)^0,w,c
  2128   001748  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2129   00174A  5808               	subwfb	(___lodiv@dividend+7)^0,w,c
  2130   00174C  A0D8               	btfss	status,0,c
  2131   00174E  D011               	goto	l1909
  2132   001750  5009               	movf	___lodiv@divisor^0,w,c
  2133   001752  5E01               	subwf	___lodiv@dividend^0,f,c
  2134   001754  500A               	movf	(___lodiv@divisor+1)^0,w,c
  2135   001756  5A02               	subwfb	(___lodiv@dividend+1)^0,f,c
  2136   001758  500B               	movf	(___lodiv@divisor+2)^0,w,c
  2137   00175A  5A03               	subwfb	(___lodiv@dividend+2)^0,f,c
  2138   00175C  500C               	movf	(___lodiv@divisor+3)^0,w,c
  2139   00175E  5A04               	subwfb	(___lodiv@dividend+3)^0,f,c
  2140   001760  500D               	movf	(___lodiv@divisor+4)^0,w,c
  2141   001762  5A05               	subwfb	(___lodiv@dividend+4)^0,f,c
  2142   001764  500E               	movf	(___lodiv@divisor+5)^0,w,c
  2143   001766  5A06               	subwfb	(___lodiv@dividend+5)^0,f,c
  2144   001768  500F               	movf	(___lodiv@divisor+6)^0,w,c
  2145   00176A  5A07               	subwfb	(___lodiv@dividend+6)^0,f,c
  2146   00176C  5010               	movf	(___lodiv@divisor+7)^0,w,c
  2147   00176E  5A08               	subwfb	(___lodiv@dividend+7)^0,f,c
  2148   001770  8011               	bsf	___lodiv@quotient^0,0,c
  2149   001772                     l1909:
  2150   001772  90D8               	bcf	status,0,c
  2151   001774  3210               	rrcf	(___lodiv@divisor+7)^0,f,c
  2152   001776  320F               	rrcf	(___lodiv@divisor+6)^0,f,c
  2153   001778  320E               	rrcf	(___lodiv@divisor+5)^0,f,c
  2154   00177A  320D               	rrcf	(___lodiv@divisor+4)^0,f,c
  2155   00177C  320C               	rrcf	(___lodiv@divisor+3)^0,f,c
  2156   00177E  320B               	rrcf	(___lodiv@divisor+2)^0,f,c
  2157   001780  320A               	rrcf	(___lodiv@divisor+1)^0,f,c
  2158   001782  3209               	rrcf	___lodiv@divisor^0,f,c
  2159   001784  2E19               	decfsz	___lodiv@counter^0,f,c
  2160   001786  D7C9               	goto	u1160
  2161   001788                     l580:
  2162   001788  C011  F001         	movff	___lodiv@quotient,?___lodiv
  2163   00178C  C012  F002         	movff	___lodiv@quotient+1,?___lodiv+1
  2164   001790  C013  F003         	movff	___lodiv@quotient+2,?___lodiv+2
  2165   001794  C014  F004         	movff	___lodiv@quotient+3,?___lodiv+3
  2166   001798  C015  F005         	movff	___lodiv@quotient+4,?___lodiv+4
  2167   00179C  C016  F006         	movff	___lodiv@quotient+5,?___lodiv+5
  2168   0017A0  C017  F007         	movff	___lodiv@quotient+6,?___lodiv+6
  2169   0017A4  C018  F008         	movff	___lodiv@quotient+7,?___lodiv+7
  2170   0017A8  0012               	return		;funcret
  2171   0017AA                     __end_of___lodiv:
  2172                           	callstack 0
  2173                           
  2174 ;; *************** function _atoi *****************
  2175 ;; Defined at:
  2176 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atoi.c"
  2177 ;; Parameters:    Size  Location     Type
  2178 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2179 ;;		 -> STR_2(9), 
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  n               2   13[COMRAM] int 
  2182 ;;  neg             2   11[COMRAM] int 
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  2    6[COMRAM] int 
  2185 ;; Registers used:
  2186 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2192 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;Total ram usage:        9 bytes
  2197 ;; Hardware stack levels used: 1
  2198 ;; Hardware stack levels required when called: 1
  2199 ;; This function calls:
  2200 ;;		___wmul
  2201 ;;		_isdigit
  2202 ;;		_isspace
  2203 ;; This function is called by:
  2204 ;;		_vfpfcnvrt
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text12
  2209   001410                     __ptext12:
  2210                           	callstack 0
  2211   001410                     _atoi:
  2212                           	callstack 26
  2213                           
  2214                           ;incstack = 0
  2215   001410  0E00               	movlw	0
  2216   001412  6E0F               	movwf	(atoi@n+1)^0,c
  2217   001414  0E00               	movlw	0
  2218   001416  6E0E               	movwf	atoi@n^0,c
  2219   001418  0E00               	movlw	0
  2220   00141A  6E0D               	movwf	(atoi@neg+1)^0,c
  2221   00141C  0E00               	movlw	0
  2222   00141E  6E0C               	movwf	atoi@neg^0,c
  2223   001420  D002               	goto	l2005
  2224   001422                     l2001:
  2225   001422  4A07               	infsnz	atoi@s^0,f,c
  2226   001424  2A08               	incf	(atoi@s+1)^0,f,c
  2227   001426                     l2005:
  2228   001426  C007  FFF6         	movff	atoi@s,tblptrl
  2229   00142A  C008  FFF7         	movff	atoi@s+1,tblptrh
  2230   00142E                     	if	0	;tblptru may be non-zero
  2231   00142E                     	endif
  2232   00142E                     	if	0	;tblptru may be non-zero
  2233   00142E                     	endif
  2234   00142E  0008               	tblrd		*
  2235   001430  50F5               	movf	tablat,w,c
  2236   001432  0A20               	xorlw	32
  2237   001434  B4D8               	btfsc	status,2,c
  2238   001436  D7F5               	goto	l2001
  2239   001438  C007  FFF6         	movff	atoi@s,tblptrl
  2240   00143C  C008  FFF7         	movff	atoi@s+1,tblptrh
  2241   001440                     	if	0	;tblptru may be non-zero
  2242   001440                     	endif
  2243   001440                     	if	0	;tblptru may be non-zero
  2244   001440                     	endif
  2245   001440  0008               	tblrd		*
  2246   001442  CFF5 F009          	movff	tablat,??_atoi
  2247   001446  0EF7               	movlw	247
  2248   001448  2409               	addwf	??_atoi^0,w,c
  2249   00144A  6E0A               	movwf	(??_atoi+1)^0,c
  2250   00144C  6A0B               	clrf	(??_atoi+2)^0,c
  2251   00144E  0EFF               	movlw	255
  2252   001450  220B               	addwfc	(??_atoi+2)^0,f,c
  2253   001452  500B               	movf	(??_atoi+2)^0,w,c
  2254   001454  E10C               	bnz	l2013
  2255   001456  0E05               	movlw	5
  2256   001458  5C0A               	subwf	(??_atoi+1)^0,w,c
  2257   00145A  B0D8               	btfsc	status,0,c
  2258   00145C  D008               	goto	l2013
  2259   00145E  D7E1               	goto	l2001
  2260   001460                     l2009:
  2261   001460  0E00               	movlw	0
  2262   001462  6E0D               	movwf	(atoi@neg+1)^0,c
  2263   001464  0E01               	movlw	1
  2264   001466  6E0C               	movwf	atoi@neg^0,c
  2265   001468                     l2011:
  2266   001468  4A07               	infsnz	atoi@s^0,f,c
  2267   00146A  2A08               	incf	(atoi@s+1)^0,f,c
  2268   00146C  D02E               	goto	l2021
  2269   00146E                     l2013:
  2270   00146E  C007  FFF6         	movff	atoi@s,tblptrl
  2271   001472  C008  FFF7         	movff	atoi@s+1,tblptrh
  2272   001476                     	if	0	;tblptru may be non-zero
  2273   001476                     	endif
  2274   001476                     	if	0	;tblptru may be non-zero
  2275   001476                     	endif
  2276   001476  0008               	tblrd		*
  2277   001478  50F5               	movf	tablat,w,c
  2278   00147A  6E09               	movwf	??_atoi^0,c
  2279   00147C  6A0A               	clrf	(??_atoi+1)^0,c
  2280                           
  2281                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2282                           ; Switch size 1, requested type "simple"
  2283                           ; Number of cases is 1, Range of values is 0 to 0
  2284                           ; switch strategies available:
  2285                           ; Name         Instructions Cycles
  2286                           ; simple_byte            4     3 (average)
  2287                           ;	Chosen strategy is simple_byte
  2288   00147E  500A               	movf	(??_atoi+1)^0,w,c
  2289   001480  0A00               	xorlw	0	; case 0
  2290   001482  A4D8               	btfss	status,2,c
  2291   001484  D022               	goto	l2021
  2292                           
  2293                           ; Switch size 1, requested type "simple"
  2294                           ; Number of cases is 2, Range of values is 43 to 45
  2295                           ; switch strategies available:
  2296                           ; Name         Instructions Cycles
  2297                           ; simple_byte            7     4 (average)
  2298                           ;	Chosen strategy is simple_byte
  2299   001486  5009               	movf	??_atoi^0,w,c
  2300   001488  0A2B               	xorlw	43	; case 43
  2301   00148A  B4D8               	btfsc	status,2,c
  2302   00148C  D7ED               	goto	l2011
  2303   00148E  0A06               	xorlw	6	; case 45
  2304   001490  B4D8               	btfsc	status,2,c
  2305   001492  D7E6               	goto	l2009
  2306   001494  D01A               	goto	l2021
  2307   001496                     l2015:
  2308   001496  C00E  F001         	movff	atoi@n,___wmul@multiplier
  2309   00149A  C00F  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2310   00149E  0E00               	movlw	0
  2311   0014A0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2312   0014A2  0E0A               	movlw	10
  2313   0014A4  6E03               	movwf	___wmul@multiplicand^0,c
  2314   0014A6  ECE4  F00D         	call	___wmul	;wreg free
  2315   0014AA  C007  FFF6         	movff	atoi@s,tblptrl
  2316   0014AE  C008  FFF7         	movff	atoi@s+1,tblptrh
  2317   0014B2                     	if	0	;tblptru may be non-zero
  2318   0014B2                     	endif
  2319   0014B2                     	if	0	;tblptru may be non-zero
  2320   0014B2                     	endif
  2321   0014B2  0008               	tblrd		*
  2322   0014B4  50F5               	movf	tablat,w,c
  2323   0014B6  5E01               	subwf	?___wmul^0,f,c
  2324   0014B8  0E00               	movlw	0
  2325   0014BA  5A02               	subwfb	(?___wmul+1)^0,f,c
  2326   0014BC  0E30               	movlw	48
  2327   0014BE  2401               	addwf	?___wmul^0,w,c
  2328   0014C0  6E0E               	movwf	atoi@n^0,c
  2329   0014C2  0E00               	movlw	0
  2330   0014C4  2002               	addwfc	(?___wmul+1)^0,w,c
  2331   0014C6  6E0F               	movwf	(atoi@n+1)^0,c
  2332   0014C8  D7CF               	goto	l2011
  2333   0014CA                     l2021:
  2334   0014CA  C007  FFF6         	movff	atoi@s,tblptrl
  2335   0014CE  C008  FFF7         	movff	atoi@s+1,tblptrh
  2336   0014D2                     	if	0	;tblptru may be non-zero
  2337   0014D2                     	endif
  2338   0014D2                     	if	0	;tblptru may be non-zero
  2339   0014D2                     	endif
  2340   0014D2  0008               	tblrd		*
  2341   0014D4  CFF5 F009          	movff	tablat,??_atoi
  2342   0014D8  0ED0               	movlw	208
  2343   0014DA  2409               	addwf	??_atoi^0,w,c
  2344   0014DC  6E0A               	movwf	(??_atoi+1)^0,c
  2345   0014DE  6A0B               	clrf	(??_atoi+2)^0,c
  2346   0014E0  0EFF               	movlw	255
  2347   0014E2  220B               	addwfc	(??_atoi+2)^0,f,c
  2348   0014E4  500B               	movf	(??_atoi+2)^0,w,c
  2349   0014E6  E104               	bnz	u1380
  2350   0014E8  0E0A               	movlw	10
  2351   0014EA  5C0A               	subwf	(??_atoi+1)^0,w,c
  2352   0014EC  A0D8               	btfss	status,0,c
  2353   0014EE  D7D3               	goto	l2015
  2354   0014F0                     u1380:
  2355   0014F0  500C               	movf	atoi@neg^0,w,c
  2356   0014F2  100D               	iorwf	(atoi@neg+1)^0,w,c
  2357   0014F4  A4D8               	btfss	status,2,c
  2358   0014F6  D00D               	goto	l918
  2359   0014F8  C00E  F009         	movff	atoi@n,??_atoi
  2360   0014FC  C00F  F00A         	movff	atoi@n+1,??_atoi+1
  2361   001500  1E09               	comf	??_atoi^0,f,c
  2362   001502  1E0A               	comf	(??_atoi+1)^0,f,c
  2363   001504  4A09               	infsnz	??_atoi^0,f,c
  2364   001506  2A0A               	incf	(??_atoi+1)^0,f,c
  2365   001508  C009  F007         	movff	??_atoi,?_atoi
  2366   00150C  C00A  F008         	movff	??_atoi+1,?_atoi+1
  2367   001510  0012               	return	
  2368   001512                     l918:
  2369   001512  C00E  F007         	movff	atoi@n,?_atoi
  2370   001516  C00F  F008         	movff	atoi@n+1,?_atoi+1
  2371   00151A  0012               	return		;funcret
  2372   00151C                     __end_of_atoi:
  2373                           	callstack 0
  2374                           
  2375 ;; *************** function _isspace *****************
  2376 ;; Defined at:
  2377 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isspace.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;  c               2    0[COMRAM] int 
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;		None
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  2    0[COMRAM] int 
  2384 ;; Registers used:
  2385 ;;		wreg, status,2, status,0
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2391 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2394 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;Total ram usage:        5 bytes
  2396 ;; Hardware stack levels used: 1
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_atoi
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           	psect	text13
  2405   001B3C                     __ptext13:
  2406                           	callstack 0
  2407   001B3C                     _isspace:
  2408                           	callstack 26
  2409                           
  2410                           ;incstack = 0
  2411   001B3C  0E01               	movlw	1
  2412   001B3E  6E05               	movwf	_isspace$718^0,c
  2413   001B40  0E20               	movlw	32
  2414   001B42  1801               	xorwf	isspace@c^0,w,c
  2415   001B44  1002               	iorwf	(isspace@c+1)^0,w,c
  2416   001B46  B4D8               	btfsc	status,2,c
  2417   001B48  D00E               	goto	l1959
  2418   001B4A  0EF7               	movlw	247
  2419   001B4C  2401               	addwf	isspace@c^0,w,c
  2420   001B4E  6E03               	movwf	??_isspace^0,c
  2421   001B50  0EFF               	movlw	255
  2422   001B52  2002               	addwfc	(isspace@c+1)^0,w,c
  2423   001B54  6E04               	movwf	(??_isspace+1)^0,c
  2424   001B56  5004               	movf	(??_isspace+1)^0,w,c
  2425   001B58  E104               	bnz	u1280
  2426   001B5A  0E05               	movlw	5
  2427   001B5C  5C03               	subwf	??_isspace^0,w,c
  2428   001B5E  A0D8               	btfss	status,0,c
  2429   001B60  D002               	goto	l1959
  2430   001B62                     u1280:
  2431   001B62  0E00               	movlw	0
  2432   001B64  6E05               	movwf	_isspace$718^0,c
  2433   001B66                     l1959:
  2434   001B66  C005  F001         	movff	_isspace$718,?_isspace
  2435   001B6A  6A02               	clrf	(?_isspace+1)^0,c
  2436   001B6C  0012               	return		;funcret
  2437   001B6E                     __end_of_isspace:
  2438                           	callstack 0
  2439                           
  2440 ;; *************** function _isdigit *****************
  2441 ;; Defined at:
  2442 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isdigit.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  c               2    0[COMRAM] int 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;		None
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  2    0[COMRAM] int 
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2456 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;Total ram usage:        4 bytes
  2461 ;; Hardware stack levels used: 1
  2462 ;; This function calls:
  2463 ;;		Nothing
  2464 ;; This function is called by:
  2465 ;;		_vfpfcnvrt
  2466 ;;		_atoi
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text14
  2471   001BEE                     __ptext14:
  2472                           	callstack 0
  2473   001BEE                     _isdigit:
  2474                           	callstack 27
  2475                           
  2476                           ;incstack = 0
  2477   001BEE  0ED0               	movlw	208
  2478   001BF0  2401               	addwf	isdigit@c^0,w,c
  2479   001BF2  6E03               	movwf	??_isdigit^0,c
  2480   001BF4  0EFF               	movlw	255
  2481   001BF6  2002               	addwfc	(isdigit@c+1)^0,w,c
  2482   001BF8  6E04               	movwf	(??_isdigit+1)^0,c
  2483   001BFA  5004               	movf	(??_isdigit+1)^0,w,c
  2484   001BFC  E106               	bnz	u1250
  2485   001BFE  0E0A               	movlw	10
  2486   001C00  5C03               	subwf	??_isdigit^0,w,c
  2487   001C02  B0D8               	btfsc	status,0,c
  2488   001C04  D002               	goto	u1250
  2489   001C06  0E01               	movlw	1
  2490   001C08  D001               	goto	u1260
  2491   001C0A                     u1250:
  2492   001C0A  0E00               	movlw	0
  2493   001C0C                     u1260:
  2494   001C0C  6E01               	movwf	?_isdigit^0,c
  2495   001C0E  6A02               	clrf	(?_isdigit+1)^0,c
  2496   001C10  0012               	return		;funcret
  2497   001C12                     __end_of_isdigit:
  2498                           	callstack 0
  2499                           
  2500 ;; *************** function ___wmul *****************
  2501 ;; Defined at:
  2502 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;  multiplier      2    0[COMRAM] unsigned int 
  2505 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;  product         2    4[COMRAM] unsigned int 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  2    0[COMRAM] unsigned int 
  2510 ;; Registers used:
  2511 ;;		wreg, status,2, status,0, prodl, prodh
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2517 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;Total ram usage:        6 bytes
  2522 ;; Hardware stack levels used: 1
  2523 ;; This function calls:
  2524 ;;		Nothing
  2525 ;; This function is called by:
  2526 ;;		_atoi
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text15
  2531   001BC8                     __ptext15:
  2532                           	callstack 0
  2533   001BC8                     ___wmul:
  2534                           	callstack 26
  2535                           
  2536                           ;incstack = 0
  2537   001BC8  5001               	movf	___wmul@multiplier^0,w,c
  2538   001BCA  0203               	mulwf	___wmul@multiplicand^0,c
  2539   001BCC  CFF3 F005          	movff	prodl,___wmul@product
  2540   001BD0  CFF4 F006          	movff	prodh,___wmul@product+1
  2541   001BD4  5001               	movf	___wmul@multiplier^0,w,c
  2542   001BD6  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2543   001BD8  50F3               	movf	243,w,c
  2544   001BDA  2606               	addwf	(___wmul@product+1)^0,f,c
  2545   001BDC  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2546   001BDE  0203               	mulwf	___wmul@multiplicand^0,c
  2547   001BE0  50F3               	movf	243,w,c
  2548   001BE2  2606               	addwf	(___wmul@product+1)^0,f,c
  2549   001BE4  C005  F001         	movff	___wmul@product,?___wmul
  2550   001BE8  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2551   001BEC  0012               	return		;funcret
  2552   001BEE                     __end_of___wmul:
  2553                           	callstack 0
  2554                           
  2555 ;; *************** function _LCD_PutS *****************
  2556 ;; Defined at:
  2557 ;;		line 102 in file "../lcd.c"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;  _str            2    7[COMRAM] PTR unsigned char 
  2560 ;;		 -> STR_1(14), 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  i               1   11[COMRAM] unsigned char 
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      void 
  2565 ;; Registers used:
  2566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2573 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2574 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2575 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2576 ;;Total ram usage:        5 bytes
  2577 ;; Hardware stack levels used: 1
  2578 ;; Hardware stack levels required when called: 4
  2579 ;; This function calls:
  2580 ;;		_WriteByte
  2581 ;;		_WritePin
  2582 ;; This function is called by:
  2583 ;;		_main
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           	psect	text16
  2588   0019FA                     __ptext16:
  2589                           	callstack 0
  2590   0019FA                     _LCD_PutS:
  2591                           	callstack 26
  2592                           
  2593                           ;../lcd.c: 102: void LCD_PutS(char* _str);../lcd.c: 103: {;../lcd.c: 104:   WritePin(LCD
      +                          _RS, 1);
  2594                           
  2595                           ;incstack = 0
  2596   0019FA  0E01               	movlw	1
  2597   0019FC  6E01               	movwf	WritePin@val^0,c
  2598   0019FE  0100               	movlb	0	; () banked
  2599   001A00  5199               	movf	_LCD_RS& (0+255),w,b
  2600   001A02  ECD4  F00C         	call	_WritePin
  2601                           
  2602                           ;../lcd.c: 105:   uint8_t i = 0;
  2603   001A06  0E00               	movlw	0
  2604   001A08  6E0C               	movwf	LCD_PutS@i^0,c
  2605                           
  2606                           ;../lcd.c: 106:   while(_str[i] != '\0')
  2607   001A0A  D00F               	goto	l2203
  2608   001A0C                     l2199:
  2609                           
  2610                           ;../lcd.c: 107:       WriteByte( _str[i++] );
  2611   001A0C  500C               	movf	LCD_PutS@i^0,w,c
  2612   001A0E  2408               	addwf	LCD_PutS@_str^0,w,c
  2613   001A10  6E0A               	movwf	??_LCD_PutS^0,c
  2614   001A12  0E00               	movlw	0
  2615   001A14  2009               	addwfc	(LCD_PutS@_str+1)^0,w,c
  2616   001A16  6E0B               	movwf	(??_LCD_PutS+1)^0,c
  2617   001A18  C00A  FFF6         	movff	??_LCD_PutS,tblptrl
  2618   001A1C  C00B  FFF7         	movff	??_LCD_PutS+1,tblptrh
  2619   001A20                     	if	0	;tblptru may be non-zero
  2620   001A20                     	endif
  2621   001A20                     	if	0	;tblptru may be non-zero
  2622   001A20                     	endif
  2623   001A20  0008               	tblrd		*
  2624   001A22  50F5               	movf	tablat,w,c
  2625   001A24  EC37  F00E         	call	_WriteByte
  2626   001A28  2A0C               	incf	LCD_PutS@i^0,f,c
  2627   001A2A                     l2203:
  2628                           
  2629                           ;../lcd.c: 106:   while(_str[i] != '\0')
  2630   001A2A  500C               	movf	LCD_PutS@i^0,w,c
  2631   001A2C  2408               	addwf	LCD_PutS@_str^0,w,c
  2632   001A2E  6E0A               	movwf	??_LCD_PutS^0,c
  2633   001A30  0E00               	movlw	0
  2634   001A32  2009               	addwfc	(LCD_PutS@_str+1)^0,w,c
  2635   001A34  6E0B               	movwf	(??_LCD_PutS+1)^0,c
  2636   001A36  C00A  FFF6         	movff	??_LCD_PutS,tblptrl
  2637   001A3A  C00B  FFF7         	movff	??_LCD_PutS+1,tblptrh
  2638   001A3E                     	if	0	;tblptru may be non-zero
  2639   001A3E                     	endif
  2640   001A3E                     	if	0	;tblptru may be non-zero
  2641   001A3E                     	endif
  2642   001A3E  0008               	tblrd		*
  2643   001A40  50F5               	movf	tablat,w,c
  2644   001A42  0900               	iorlw	0
  2645   001A44  B4D8               	btfsc	status,2,c
  2646   001A46  0012               	return	
  2647   001A48  D7E1               	goto	l2199
  2648   001A4A                     __end_of_LCD_PutS:
  2649                           	callstack 0
  2650                           
  2651 ;; *************** function _LCD_Goto *****************
  2652 ;; Defined at:
  2653 ;;		line 75 in file "../lcd.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;  col             1    wreg     unsigned char 
  2656 ;;  row             1    7[COMRAM] unsigned char 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  col             1   10[COMRAM] unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2668 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;Total ram usage:        4 bytes
  2673 ;; Hardware stack levels used: 1
  2674 ;; Hardware stack levels required when called: 4
  2675 ;; This function calls:
  2676 ;;		_WriteByte
  2677 ;;		_WritePin
  2678 ;; This function is called by:
  2679 ;;		_main
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text17
  2684   001946                     __ptext17:
  2685                           	callstack 0
  2686   001946                     _LCD_Goto:
  2687                           	callstack 26
  2688                           
  2689                           ;incstack = 0
  2690                           ;LCD_Goto@col stored from wreg
  2691   001946  6E0B               	movwf	LCD_Goto@col^0,c
  2692                           
  2693                           ;../lcd.c: 75: void LCD_Goto(uint8_t col, uint8_t row);../lcd.c: 76: {;../lcd.c: 77:    
      +                           WritePin(LCD_RS, 0);
  2694   001948  0E00               	movlw	0
  2695   00194A  6E01               	movwf	WritePin@val^0,c
  2696   00194C  0100               	movlb	0	; () banked
  2697   00194E  5199               	movf	_LCD_RS& (0+255),w,b
  2698   001950  ECD4  F00C         	call	_WritePin
  2699                           
  2700                           ;../lcd.c: 78:     switch (row)
  2701   001954  D014               	goto	l2189
  2702   001956                     l2179:
  2703   001956  500B               	movf	LCD_Goto@col^0,w,c
  2704   001958  0F7F               	addlw	127
  2705   00195A  EC37  F00E         	call	_WriteByte
  2706   00195E  0012               	return	
  2707   001960                     l2181:
  2708   001960  500B               	movf	LCD_Goto@col^0,w,c
  2709   001962  0FBF               	addlw	191
  2710   001964  EC37  F00E         	call	_WriteByte
  2711   001968  0012               	return	
  2712   00196A                     l2183:
  2713   00196A  500B               	movf	LCD_Goto@col^0,w,c
  2714   00196C  0F93               	addlw	147
  2715   00196E  EC37  F00E         	call	_WriteByte
  2716   001972  0012               	return	
  2717   001974                     l2185:
  2718   001974  500B               	movf	LCD_Goto@col^0,w,c
  2719   001976  0FD3               	addlw	211
  2720   001978  EC37  F00E         	call	_WriteByte
  2721   00197C  0012               	return	
  2722   00197E                     l2189:
  2723   00197E  5008               	movf	LCD_Goto@row^0,w,c
  2724   001980  6E09               	movwf	??_LCD_Goto^0,c
  2725   001982  6A0A               	clrf	(??_LCD_Goto+1)^0,c
  2726                           
  2727                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2728                           ; Switch size 1, requested type "simple"
  2729                           ; Number of cases is 1, Range of values is 0 to 0
  2730                           ; switch strategies available:
  2731                           ; Name         Instructions Cycles
  2732                           ; simple_byte            4     3 (average)
  2733                           ;	Chosen strategy is simple_byte
  2734   001984  500A               	movf	(??_LCD_Goto+1)^0,w,c
  2735   001986  0A00               	xorlw	0	; case 0
  2736   001988  A4D8               	btfss	status,2,c
  2737   00198A  0012               	return	
  2738                           
  2739                           ; Switch size 1, requested type "simple"
  2740                           ; Number of cases is 4, Range of values is 1 to 4
  2741                           ; switch strategies available:
  2742                           ; Name         Instructions Cycles
  2743                           ; simple_byte           13     7 (average)
  2744                           ;	Chosen strategy is simple_byte
  2745   00198C  5009               	movf	??_LCD_Goto^0,w,c
  2746   00198E  0A01               	xorlw	1	; case 1
  2747   001990  B4D8               	btfsc	status,2,c
  2748   001992  D7E1               	goto	l2179
  2749   001994  0A03               	xorlw	3	; case 2
  2750   001996  B4D8               	btfsc	status,2,c
  2751   001998  D7E3               	goto	l2181
  2752   00199A  0A01               	xorlw	1	; case 3
  2753   00199C  B4D8               	btfsc	status,2,c
  2754   00199E  D7E5               	goto	l2183
  2755   0019A0  0A07               	xorlw	7	; case 4
  2756   0019A2  A4D8               	btfss	status,2,c
  2757   0019A4  0012               	return	
  2758   0019A6  D7E6               	goto	l2185
  2759   0019A8                     __end_of_LCD_Goto:
  2760                           	callstack 0
  2761                           
  2762 ;; *************** function _LCD_Begin *****************
  2763 ;; Defined at:
  2764 ;;		line 32 in file "../lcd.c"
  2765 ;; Parameters:    Size  Location     Type
  2766 ;;  cols            1    wreg     unsigned char 
  2767 ;;  lines           1    8[COMRAM] unsigned char 
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;  cols            1    0[COMRAM] unsigned char 
  2770 ;;  _function_se    1   11[COMRAM] unsigned char 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2780 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;Total ram usage:        4 bytes
  2785 ;; Hardware stack levels used: 1
  2786 ;; Hardware stack levels required when called: 5
  2787 ;; This function calls:
  2788 ;;		_LCD_Clear
  2789 ;;		_WriteByte
  2790 ;;		_WriteNibble
  2791 ;;		_WritePin
  2792 ;; This function is called by:
  2793 ;;		_main
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           	psect	text18
  2798   001604                     __ptext18:
  2799                           	callstack 0
  2800   001604                     _LCD_Begin:
  2801                           	callstack 25
  2802                           
  2803                           ;../lcd.c: 32: void LCD_Begin(uint8_t cols, uint8_t lines);../lcd.c: 33: {;../lcd.c: 34:
      +                               uint8_t _function_set = 0x20;
  2804                           
  2805                           ;incstack = 0
  2806   001604  0E20               	movlw	32
  2807   001606  6E0C               	movwf	LCD_Begin@_function_set^0,c
  2808                           
  2809                           ;../lcd.c: 36:     WritePin(LCD_RS, 0);
  2810   001608  0E00               	movlw	0
  2811   00160A  6E01               	movwf	WritePin@val^0,c
  2812   00160C  0100               	movlb	0	; () banked
  2813   00160E  5199               	movf	_LCD_RS& (0+255),w,b
  2814   001610  ECD4  F00C         	call	_WritePin
  2815                           
  2816                           ;../lcd.c: 37:     WritePin(LCD_EN, 0);
  2817   001614  0E00               	movlw	0
  2818   001616  6E01               	movwf	WritePin@val^0,c
  2819   001618  0100               	movlb	0	; () banked
  2820   00161A  5198               	movf	_LCD_EN& (0+255),w,b
  2821   00161C  ECD4  F00C         	call	_WritePin
  2822                           
  2823                           ;../lcd.c: 38:     WritePin(LCD_D4, 0);
  2824   001620  0E00               	movlw	0
  2825   001622  6E01               	movwf	WritePin@val^0,c
  2826   001624  0100               	movlb	0	; () banked
  2827   001626  5197               	movf	_LCD_D4& (0+255),w,b
  2828   001628  ECD4  F00C         	call	_WritePin
  2829                           
  2830                           ;../lcd.c: 39:     WritePin(LCD_D5, 0);
  2831   00162C  0E00               	movlw	0
  2832   00162E  6E01               	movwf	WritePin@val^0,c
  2833   001630  0100               	movlb	0	; () banked
  2834   001632  5196               	movf	_LCD_D5& (0+255),w,b
  2835   001634  ECD4  F00C         	call	_WritePin
  2836                           
  2837                           ;../lcd.c: 40:     WritePin(LCD_D6, 0);
  2838   001638  0E00               	movlw	0
  2839   00163A  6E01               	movwf	WritePin@val^0,c
  2840   00163C  0100               	movlb	0	; () banked
  2841   00163E  5195               	movf	_LCD_D6& (0+255),w,b
  2842   001640  ECD4  F00C         	call	_WritePin
  2843                           
  2844                           ;../lcd.c: 41:     WritePin(LCD_D7, 0);
  2845   001644  0E00               	movlw	0
  2846   001646  6E01               	movwf	WritePin@val^0,c
  2847   001648  0100               	movlb	0	; () banked
  2848   00164A  5194               	movf	_LCD_D7& (0+255),w,b
  2849   00164C  ECD4  F00C         	call	_WritePin
  2850                           
  2851                           ;../lcd.c: 43:     _delay((unsigned long)((2000)*(_XTAL_FREQ/4000.0)));
  2852   001650  0E15               	movlw	21
  2853   001652  6E0B               	movwf	(??_LCD_Begin+1)^0,c
  2854   001654  0E4B               	movlw	75
  2855   001656  6E0A               	movwf	??_LCD_Begin^0,c
  2856   001658  0EBE               	movlw	190
  2857   00165A                     u2147:
  2858   00165A  2EE8               	decfsz	wreg,f,c
  2859   00165C  D7FE               	bra	u2147
  2860   00165E  2E0A               	decfsz	??_LCD_Begin^0,f,c
  2861   001660  D7FC               	bra	u2147
  2862   001662  2E0B               	decfsz	(??_LCD_Begin+1)^0,f,c
  2863   001664  D7FA               	bra	u2147
  2864   001666  D000               	nop2	
  2865                           
  2866                           ;../lcd.c: 45:     if (lines > 1) {
  2867   001668  0E01               	movlw	1
  2868   00166A  6409               	cpfsgt	LCD_Begin@lines^0,c
  2869   00166C  D001               	goto	l2149
  2870                           
  2871                           ;../lcd.c: 46:         _function_set |= 0x08;
  2872   00166E  860C               	bsf	LCD_Begin@_function_set^0,3,c
  2873   001670                     l2149:
  2874                           
  2875                           ;../lcd.c: 52:     WriteNibble(0x03);
  2876   001670  0E03               	movlw	3
  2877   001672  EC47  F00D         	call	_WriteNibble
  2878                           
  2879                           ;../lcd.c: 53:     _delay((unsigned long)((5)*(_XTAL_FREQ/4000.0)));
  2880   001676  0E0D               	movlw	13
  2881   001678  6E0A               	movwf	??_LCD_Begin^0,c
  2882   00167A  0EFC               	movlw	252
  2883   00167C                     u2157:
  2884   00167C  2EE8               	decfsz	wreg,f,c
  2885   00167E  D7FE               	bra	u2157
  2886   001680  2E0A               	decfsz	??_LCD_Begin^0,f,c
  2887   001682  D7FC               	bra	u2157
  2888                           
  2889                           ;../lcd.c: 54:     WriteNibble(0x03);
  2890   001684  0E03               	movlw	3
  2891   001686  EC47  F00D         	call	_WriteNibble
  2892                           
  2893                           ;../lcd.c: 55:     _delay((unsigned long)((200)*(_XTAL_FREQ/4000000.0)));
  2894   00168A  0E85               	movlw	133
  2895   00168C                     u2167:
  2896   00168C  2EE8               	decfsz	wreg,f,c
  2897   00168E  D7FE               	bra	u2167
  2898   001690  F000               	nop	
  2899                           
  2900                           ;../lcd.c: 56:     WriteNibble(0x03);
  2901   001692  0E03               	movlw	3
  2902   001694  EC47  F00D         	call	_WriteNibble
  2903                           
  2904                           ;../lcd.c: 57:     _delay((unsigned long)((100)*(_XTAL_FREQ/4000000.0)));
  2905   001698  0E42               	movlw	66
  2906   00169A                     u2177:
  2907   00169A  2EE8               	decfsz	wreg,f,c
  2908   00169C  D7FE               	bra	u2177
  2909   00169E  D000               	nop2	
  2910                           
  2911                           ;../lcd.c: 58:     WriteNibble(0x02);
  2912   0016A0  0E02               	movlw	2
  2913   0016A2  EC47  F00D         	call	_WriteNibble
  2914                           
  2915                           ;../lcd.c: 59:     _delay((unsigned long)((100)*(_XTAL_FREQ/4000000.0)));
  2916   0016A6  0E42               	movlw	66
  2917   0016A8                     u2187:
  2918   0016A8  2EE8               	decfsz	wreg,f,c
  2919   0016AA  D7FE               	bra	u2187
  2920   0016AC  D000               	nop2	
  2921                           
  2922                           ;../lcd.c: 61:     WriteByte( _function_set );
  2923   0016AE  500C               	movf	LCD_Begin@_function_set^0,w,c
  2924   0016B0  EC37  F00E         	call	_WriteByte
  2925                           
  2926                           ;../lcd.c: 64:     WriteByte( 0x08 | 0x04 );
  2927   0016B4  0E0C               	movlw	12
  2928   0016B6  EC37  F00E         	call	_WriteByte
  2929                           
  2930                           ;../lcd.c: 67:     LCD_Clear();
  2931   0016BA  EC09  F00E         	call	_LCD_Clear	;wreg free
  2932                           
  2933                           ;../lcd.c: 69:     WriteByte( 0x04 | 0x02 );
  2934   0016BE  0E06               	movlw	6
  2935   0016C0  EC37  F00E         	call	_WriteByte
  2936                           
  2937                           ;../lcd.c: 70:     _delay((unsigned long)((2)*(_XTAL_FREQ/4000.0)));
  2938   0016C4  0E06               	movlw	6
  2939   0016C6  6E0A               	movwf	??_LCD_Begin^0,c
  2940   0016C8  0E30               	movlw	48
  2941   0016CA                     u2197:
  2942   0016CA  2EE8               	decfsz	wreg,f,c
  2943   0016CC  D7FE               	bra	u2197
  2944   0016CE  2E0A               	decfsz	??_LCD_Begin^0,f,c
  2945   0016D0  D7FC               	bra	u2197
  2946   0016D2  D000               	nop2	
  2947                           
  2948                           ;../lcd.c: 71:     _displaycontrol = 0x08 | 0x04;
  2949   0016D4  0E0C               	movlw	12
  2950   0016D6  0100               	movlb	0	; () banked
  2951   0016D8  6F65               	movwf	__displaycontrol& (0+255),b
  2952                           
  2953                           ; BSR set to: 0
  2954   0016DA  0012               	return		;funcret
  2955   0016DC                     __end_of_LCD_Begin:
  2956                           	callstack 0
  2957                           
  2958 ;; *************** function _LCD_Clear *****************
  2959 ;; Defined at:
  2960 ;;		line 88 in file "../lcd.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;		None
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;		None
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  1    wreg      void 
  2967 ;; Registers used:
  2968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;Total ram usage:        1 bytes
  2979 ;; Hardware stack levels used: 1
  2980 ;; Hardware stack levels required when called: 4
  2981 ;; This function calls:
  2982 ;;		_WriteByte
  2983 ;;		_WritePin
  2984 ;; This function is called by:
  2985 ;;		_main
  2986 ;;		_LCD_Begin
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text19
  2991   001C12                     __ptext19:
  2992                           	callstack 0
  2993   001C12                     _LCD_Clear:
  2994                           	callstack 26
  2995                           
  2996                           ;../lcd.c: 90:     WritePin(LCD_RS, 0);
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;incstack = 0
  3000   001C12  0E00               	movlw	0
  3001   001C14  6E01               	movwf	WritePin@val^0,c
  3002   001C16  0100               	movlb	0	; () banked
  3003   001C18  5199               	movf	_LCD_RS& (0+255),w,b
  3004   001C1A  ECD4  F00C         	call	_WritePin
  3005                           
  3006                           ;../lcd.c: 91:     WriteByte( 0x01 );
  3007   001C1E  0E01               	movlw	1
  3008   001C20  EC37  F00E         	call	_WriteByte
  3009                           
  3010                           ;../lcd.c: 92:     _delay((unsigned long)((2)*(_XTAL_FREQ/4000.0)));
  3011   001C24  0E06               	movlw	6
  3012   001C26  6E08               	movwf	??_LCD_Clear^0,c
  3013   001C28  0E30               	movlw	48
  3014   001C2A                     u2207:
  3015   001C2A  2EE8               	decfsz	wreg,f,c
  3016   001C2C  D7FE               	bra	u2207
  3017   001C2E  2E08               	decfsz	??_LCD_Clear^0,f,c
  3018   001C30  D7FC               	bra	u2207
  3019   001C32  D000               	nop2	
  3020   001C34  0012               	return		;funcret
  3021   001C36                     __end_of_LCD_Clear:
  3022                           	callstack 0
  3023                           
  3024 ;; *************** function _WriteByte *****************
  3025 ;; Defined at:
  3026 ;;		line 202 in file "../lcd.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  b               1    wreg     unsigned char 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  b               1    6[COMRAM] unsigned char 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3041 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;Total ram usage:        1 bytes
  3045 ;; Hardware stack levels used: 1
  3046 ;; Hardware stack levels required when called: 3
  3047 ;; This function calls:
  3048 ;;		_WriteNibble
  3049 ;; This function is called by:
  3050 ;;		_LCD_Begin
  3051 ;;		_LCD_Goto
  3052 ;;		_LCD_Clear
  3053 ;;		_LCD_PutC
  3054 ;;		_LCD_PutS
  3055 ;;		_LCD_Display
  3056 ;;		_LCD_CursorUnderline
  3057 ;;		_LCD_CursorBlink
  3058 ;;		_LCD_ShiftLeft
  3059 ;;		_LCD_ShiftRight
  3060 ;;		_LCD_MoveCursorLeft
  3061 ;;		_LCD_MoveCursorRight
  3062 ;;		_LCD_ReturnHome
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text20
  3067   001C6E                     __ptext20:
  3068                           	callstack 0
  3069   001C6E                     _WriteByte:
  3070                           	callstack 18
  3071                           
  3072                           ;incstack = 0
  3073                           ;WriteByte@b stored from wreg
  3074   001C6E  6E07               	movwf	WriteByte@b^0,c
  3075                           
  3076                           ;../lcd.c: 202: void WriteByte(uint8_t b);../lcd.c: 203: {;../lcd.c: 204:     WriteNibbl
      +                          e( b >> 4);
  3077   001C70  3807               	swapf	WriteByte@b^0,w,c
  3078   001C72  0B0F               	andlw	15
  3079   001C74  EC47  F00D         	call	_WriteNibble
  3080                           
  3081                           ;../lcd.c: 205:     WriteNibble(b);
  3082   001C78  5007               	movf	WriteByte@b^0,w,c
  3083   001C7A  EC47  F00D         	call	_WriteNibble
  3084   001C7E  0012               	return		;funcret
  3085   001C80                     __end_of_WriteByte:
  3086                           	callstack 0
  3087                           
  3088 ;; *************** function _WriteNibble *****************
  3089 ;; Defined at:
  3090 ;;		line 190 in file "../lcd.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;  b               1    wreg     unsigned char 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;  b               1    5[COMRAM] unsigned char 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;Total ram usage:        1 bytes
  3109 ;; Hardware stack levels used: 1
  3110 ;; Hardware stack levels required when called: 2
  3111 ;; This function calls:
  3112 ;;		_EnablePulse
  3113 ;;		_WritePin
  3114 ;; This function is called by:
  3115 ;;		_LCD_Begin
  3116 ;;		_WriteByte
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           	psect	text21
  3121   001A8E                     __ptext21:
  3122                           	callstack 0
  3123   001A8E                     _WriteNibble:
  3124                           	callstack 18
  3125                           
  3126                           ;incstack = 0
  3127                           ;WriteNibble@b stored from wreg
  3128   001A8E  6E06               	movwf	WriteNibble@b^0,c
  3129                           
  3130                           ;../lcd.c: 190: void WriteNibble(uint8_t b);../lcd.c: 191: {;../lcd.c: 192:     WritePin
      +                          ( LCD_D4, (b & 0x01) );
  3131   001A90  5006               	movf	WriteNibble@b^0,w,c
  3132   001A92  0B01               	andlw	1
  3133   001A94  6E01               	movwf	WritePin@val^0,c
  3134   001A96  0100               	movlb	0	; () banked
  3135   001A98  5197               	movf	_LCD_D4& (0+255),w,b
  3136   001A9A  ECD4  F00C         	call	_WritePin
  3137                           
  3138                           ;../lcd.c: 193:     WritePin( LCD_D5, (b & 0x02) );
  3139   001A9E  5006               	movf	WriteNibble@b^0,w,c
  3140   001AA0  0B02               	andlw	2
  3141   001AA2  6E01               	movwf	WritePin@val^0,c
  3142   001AA4  0100               	movlb	0	; () banked
  3143   001AA6  5196               	movf	_LCD_D5& (0+255),w,b
  3144   001AA8  ECD4  F00C         	call	_WritePin
  3145                           
  3146                           ;../lcd.c: 194:     WritePin( LCD_D6, (b & 0x04) );
  3147   001AAC  5006               	movf	WriteNibble@b^0,w,c
  3148   001AAE  0B04               	andlw	4
  3149   001AB0  6E01               	movwf	WritePin@val^0,c
  3150   001AB2  0100               	movlb	0	; () banked
  3151   001AB4  5195               	movf	_LCD_D6& (0+255),w,b
  3152   001AB6  ECD4  F00C         	call	_WritePin
  3153                           
  3154                           ;../lcd.c: 195:     WritePin( LCD_D7, (b & 0x08) );
  3155   001ABA  5006               	movf	WriteNibble@b^0,w,c
  3156   001ABC  0B08               	andlw	8
  3157   001ABE  6E01               	movwf	WritePin@val^0,c
  3158   001AC0  0100               	movlb	0	; () banked
  3159   001AC2  5194               	movf	_LCD_D7& (0+255),w,b
  3160   001AC4  ECD4  F00C         	call	_WritePin
  3161                           
  3162                           ;../lcd.c: 198:     EnablePulse();
  3163   001AC8  ECB7  F00D         	call	_EnablePulse	;wreg free
  3164   001ACC  0012               	return		;funcret
  3165   001ACE                     __end_of_WriteNibble:
  3166                           	callstack 0
  3167                           
  3168 ;; *************** function _EnablePulse *****************
  3169 ;; Defined at:
  3170 ;;		line 209 in file "../lcd.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;		None
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;		None
  3175 ;; Return value:  Size  Location     Type
  3176 ;;                  1    wreg      void 
  3177 ;; Registers used:
  3178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3188 ;;Total ram usage:        0 bytes
  3189 ;; Hardware stack levels used: 1
  3190 ;; Hardware stack levels required when called: 1
  3191 ;; This function calls:
  3192 ;;		_WritePin
  3193 ;; This function is called by:
  3194 ;;		_WriteNibble
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           	psect	text22
  3199   001B6E                     __ptext22:
  3200                           	callstack 0
  3201   001B6E                     _EnablePulse:
  3202                           	callstack 18
  3203                           
  3204                           ;../lcd.c: 211:     WritePin(LCD_EN, 0);
  3205                           
  3206                           ;incstack = 0
  3207   001B6E  0E00               	movlw	0
  3208   001B70  6E01               	movwf	WritePin@val^0,c
  3209   001B72  0100               	movlb	0	; () banked
  3210   001B74  5198               	movf	_LCD_EN& (0+255),w,b
  3211   001B76  ECD4  F00C         	call	_WritePin
  3212                           
  3213                           ;../lcd.c: 212:     _delay((unsigned long)((1)*(_XTAL_FREQ/4000000.0)));
  3214   001B7A  D000               	nop2		;2 cycle nop
  3215                           
  3216                           ;../lcd.c: 213:     WritePin(LCD_EN, 1);
  3217   001B7C  0E01               	movlw	1
  3218   001B7E  6E01               	movwf	WritePin@val^0,c
  3219   001B80  0100               	movlb	0	; () banked
  3220   001B82  5198               	movf	_LCD_EN& (0+255),w,b
  3221   001B84  ECD4  F00C         	call	_WritePin
  3222                           
  3223                           ;../lcd.c: 214:     _delay((unsigned long)((1)*(_XTAL_FREQ/4000000.0)));
  3224   001B88  D000               	nop2		;2 cycle nop
  3225                           
  3226                           ;../lcd.c: 215:     WritePin(LCD_EN, 0);
  3227   001B8A  0E00               	movlw	0
  3228   001B8C  6E01               	movwf	WritePin@val^0,c
  3229   001B8E  0100               	movlb	0	; () banked
  3230   001B90  5198               	movf	_LCD_EN& (0+255),w,b
  3231   001B92  ECD4  F00C         	call	_WritePin
  3232                           
  3233                           ;../lcd.c: 216:     _delay((unsigned long)((100)*(_XTAL_FREQ/4000000.0)));
  3234   001B96  0E42               	movlw	66
  3235   001B98                     u2217:
  3236   001B98  2EE8               	decfsz	wreg,f,c
  3237   001B9A  D7FE               	bra	u2217
  3238   001B9C  D000               	nop2	
  3239   001B9E  0012               	return		;funcret
  3240   001BA0                     __end_of_EnablePulse:
  3241                           	callstack 0
  3242                           
  3243 ;; *************** function _WritePin *****************
  3244 ;; Defined at:
  3245 ;;		line 220 in file "../lcd.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  _pin            1    wreg     unsigned char 
  3248 ;;  val             1    0[COMRAM] unsigned char 
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;  _pin            1    4[COMRAM] unsigned char 
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3260 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;Total ram usage:        5 bytes
  3265 ;; Hardware stack levels used: 1
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_LCD_Begin
  3270 ;;		_LCD_Goto
  3271 ;;		_LCD_Clear
  3272 ;;		_LCD_PutC
  3273 ;;		_LCD_PutS
  3274 ;;		_WriteNibble
  3275 ;;		_EnablePulse
  3276 ;;		_LCD_Display
  3277 ;;		_LCD_CursorUnderline
  3278 ;;		_LCD_CursorBlink
  3279 ;;		_LCD_ShiftLeft
  3280 ;;		_LCD_ShiftRight
  3281 ;;		_LCD_MoveCursorLeft
  3282 ;;		_LCD_MoveCursorRight
  3283 ;;		_LCD_ReturnHome
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           	psect	text23
  3288   0019A8                     __ptext23:
  3289                           	callstack 0
  3290   0019A8                     _WritePin:
  3291                           	callstack 21
  3292                           
  3293                           ;incstack = 0
  3294                           ;WritePin@_pin stored from wreg
  3295   0019A8  6E05               	movwf	WritePin@_pin^0,c
  3296                           
  3297                           ;../lcd.c: 220: void WritePin(uint8_t _pin, uint8_t val);../lcd.c: 221: {;../lcd.c: 222:
      +                               if (val)
  3298   0019AA  5001               	movf	WritePin@val^0,w,c
  3299   0019AC  B4D8               	btfsc	status,2,c
  3300   0019AE  D011               	goto	l1845
  3301                           
  3302                           ;../lcd.c: 223:         *_port |= (1 << _pin);
  3303   0019B0  C005  F002         	movff	WritePin@_pin,??_WritePin
  3304   0019B4  0E01               	movlw	1
  3305   0019B6  6E03               	movwf	(??_WritePin+1)^0,c
  3306   0019B8  2A02               	incf	??_WritePin^0,f,c
  3307   0019BA  D002               	goto	u1074
  3308   0019BC                     u1075:
  3309   0019BC  90D8               	bcf	status,0,c
  3310   0019BE  3603               	rlcf	(??_WritePin+1)^0,f,c
  3311   0019C0                     u1074:
  3312   0019C0  2E02               	decfsz	??_WritePin^0,f,c
  3313   0019C2  D7FC               	goto	u1075
  3314   0019C4  C092  FFD9         	movff	__port,fsr2l
  3315   0019C8  C093  FFDA         	movff	__port+1,fsr2h
  3316   0019CC  5003               	movf	(??_WritePin+1)^0,w,c
  3317   0019CE  12DF               	iorwf	indf2,f,c
  3318   0019D0  0012               	return	
  3319   0019D2                     l1845:
  3320                           
  3321                           ;../lcd.c: 225:         *_port &= ~(1 << _pin);
  3322   0019D2  C005  F002         	movff	WritePin@_pin,??_WritePin
  3323   0019D6  0E01               	movlw	1
  3324   0019D8  6E03               	movwf	(??_WritePin+1)^0,c
  3325   0019DA  2A02               	incf	??_WritePin^0,f,c
  3326   0019DC  D002               	goto	u1084
  3327   0019DE                     u1085:
  3328   0019DE  90D8               	bcf	status,0,c
  3329   0019E0  3603               	rlcf	(??_WritePin+1)^0,f,c
  3330   0019E2                     u1084:
  3331   0019E2  2E02               	decfsz	??_WritePin^0,f,c
  3332   0019E4  D7FC               	goto	u1085
  3333   0019E6  5003               	movf	(??_WritePin+1)^0,w,c
  3334   0019E8  0AFF               	xorlw	255
  3335   0019EA  6E04               	movwf	(??_WritePin+2)^0,c
  3336   0019EC  C092  FFD9         	movff	__port,fsr2l
  3337   0019F0  C093  FFDA         	movff	__port+1,fsr2h
  3338   0019F4  5004               	movf	(??_WritePin+2)^0,w,c
  3339   0019F6  16DF               	andwf	indf2,f,c
  3340   0019F8  0012               	return		;funcret
  3341   0019FA                     __end_of_WritePin:
  3342                           	callstack 0
  3343                           
  3344 ;; *************** function _LCD *****************
  3345 ;; Defined at:
  3346 ;;		line 19 in file "../lcd.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;  _p              2    0[COMRAM] PTR volatile unsigned ch
  3349 ;;		 -> PORTD(1), 
  3350 ;;  rs              1    2[COMRAM] unsigned char 
  3351 ;;  en              1    3[COMRAM] unsigned char 
  3352 ;;  d4              1    4[COMRAM] unsigned char 
  3353 ;;  d5              1    5[COMRAM] unsigned char 
  3354 ;;  d6              1    6[COMRAM] unsigned char 
  3355 ;;  d7              1    7[COMRAM] unsigned char 
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;		None
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  1    wreg      void 
  3360 ;; Registers used:
  3361 ;;		wreg, status,2, status,0
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3367 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;Total ram usage:        8 bytes
  3372 ;; Hardware stack levels used: 1
  3373 ;; This function calls:
  3374 ;;		Nothing
  3375 ;; This function is called by:
  3376 ;;		_main
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text24
  3381   001C36                     __ptext24:
  3382                           	callstack 0
  3383   001C36                     _LCD:
  3384                           	callstack 30
  3385                           
  3386                           ;../lcd.c: 19: void LCD(volatile unsigned char *_p, uint8_t rs, uint8_t en, uint8_t d4,;
      +                          ../lcd.c: 20:         uint8_t d5, uint8_t d6, uint8_t d7);../lcd.c: 21: {;../lcd.c: 22: 
      +                              _port = _p;
  3387                           
  3388                           ;incstack = 0
  3389   001C36  C001  F092         	movff	LCD@_p,__port
  3390   001C3A  C002  F093         	movff	LCD@_p+1,__port+1
  3391                           
  3392                           ;../lcd.c: 23:     LCD_RS = rs;
  3393   001C3E  C003  F099         	movff	LCD@rs,_LCD_RS
  3394                           
  3395                           ;../lcd.c: 24:     LCD_EN = en;
  3396   001C42  C004  F098         	movff	LCD@en,_LCD_EN
  3397                           
  3398                           ;../lcd.c: 25:     LCD_D4 = d4;
  3399   001C46  C005  F097         	movff	LCD@d4,_LCD_D4
  3400                           
  3401                           ;../lcd.c: 26:     LCD_D5 = d5;
  3402   001C4A  C006  F096         	movff	LCD@d5,_LCD_D5
  3403                           
  3404                           ;../lcd.c: 27:     LCD_D6 = d6;
  3405   001C4E  C007  F095         	movff	LCD@d6,_LCD_D6
  3406                           
  3407                           ;../lcd.c: 28:     LCD_D7 = d7;
  3408   001C52  C008  F094         	movff	LCD@d7,_LCD_D7
  3409   001C56  0012               	return		;funcret
  3410   001C58                     __end_of_LCD:
  3411                           	callstack 0
  3412                           
  3413                           	psect	rparam
  3414   000000                     
  3415                           	psect	config
  3416                           
  3417                           ; Padding undefined space
  3418   300000                     	org	3145728
  3419   300000  FF                 	db	255
  3420                           
  3421                           ;Config register CONFIG1H @ 0x300001
  3422                           ;	Oscillator Selection bits
  3423                           ;	FOSC = INTIO67, Internal oscillator block
  3424                           ;	4X PLL Enable
  3425                           ;	PLLCFG = OFF, Oscillator used directly
  3426                           ;	Primary clock enable bit
  3427                           ;	PRICLKEN = ON, Primary clock is always enabled
  3428                           ;	Fail-Safe Clock Monitor Enable bit
  3429                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3430                           ;	Internal/External Oscillator Switchover bit
  3431                           ;	IESO = ON, Oscillator Switchover mode enabled
  3432   300001                     	org	3145729
  3433   300001  E8                 	db	232
  3434                           
  3435                           ;Config register CONFIG2L @ 0x300002
  3436                           ;	Power-up Timer Enable bit
  3437                           ;	PWRTEN = ON, Power up timer enabled
  3438                           ;	Brown-out Reset Enable bits
  3439                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3440                           ;	Brown Out Reset Voltage bits
  3441                           ;	BORV = 190, VBOR set to 1.90 V nominal
  3442   300002                     	org	3145730
  3443   300002  18                 	db	24
  3444                           
  3445                           ;Config register CONFIG2H @ 0x300003
  3446                           ;	Watchdog Timer Enable bits
  3447                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  3448                           ;	Watchdog Timer Postscale Select bits
  3449                           ;	WDTPS = 32768, 1:32768
  3450   300003                     	org	3145731
  3451   300003  3C                 	db	60
  3452                           
  3453                           ; Padding undefined space
  3454   300004                     	org	3145732
  3455   300004  FF                 	db	255
  3456                           
  3457                           ;Config register CONFIG3H @ 0x300005
  3458                           ;	CCP2 MUX bit
  3459                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  3460                           ;	PORTB A/D Enable bit
  3461                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  3462                           ;	P3A/CCP3 Mux bit
  3463                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  3464                           ;	HFINTOSC Fast Start-up
  3465                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  3466                           ;	Timer3 Clock input mux bit
  3467                           ;	T3CMX = PORTC0, T3CKI is on RC0
  3468                           ;	ECCP2 B output mux bit
  3469                           ;	P2BMX = PORTD2, P2B is on RD2
  3470                           ;	MCLR Pin Enable bit
  3471                           ;	MCLRE = INTMCLR, RE3 input pin enabled; MCLR disabled
  3472   300005                     	org	3145733
  3473   300005  3F                 	db	63
  3474                           
  3475                           ;Config register CONFIG4L @ 0x300006
  3476                           ;	Stack Full/Underflow Reset Enable bit
  3477                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3478                           ;	Single-Supply ICSP Enable bit
  3479                           ;	LVP = OFF, Single-Supply ICSP disabled
  3480                           ;	Extended Instruction Set Enable bit
  3481                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3482                           ;	Background Debug
  3483                           ;	DEBUG = 0x1, unprogrammed default
  3484   300006                     	org	3145734
  3485   300006  81                 	db	129
  3486                           
  3487                           ; Padding undefined space
  3488   300007                     	org	3145735
  3489   300007  FF                 	db	255
  3490                           
  3491                           ;Config register CONFIG5L @ 0x300008
  3492                           ;	Code Protection Block 0
  3493                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  3494                           ;	Code Protection Block 1
  3495                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  3496                           ;	Code Protection Block 2
  3497                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  3498                           ;	Code Protection Block 3
  3499                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  3500   300008                     	org	3145736
  3501   300008  0F                 	db	15
  3502                           
  3503                           ;Config register CONFIG5H @ 0x300009
  3504                           ;	Boot Block Code Protection bit
  3505                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3506                           ;	Data EEPROM Code Protection bit
  3507                           ;	CPD = OFF, Data EEPROM not code-protected
  3508   300009                     	org	3145737
  3509   300009  C0                 	db	192
  3510                           
  3511                           ;Config register CONFIG6L @ 0x30000A
  3512                           ;	Write Protection Block 0
  3513                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  3514                           ;	Write Protection Block 1
  3515                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  3516                           ;	Write Protection Block 2
  3517                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  3518                           ;	Write Protection Block 3
  3519                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  3520   30000A                     	org	3145738
  3521   30000A  0F                 	db	15
  3522                           
  3523                           ;Config register CONFIG6H @ 0x30000B
  3524                           ;	Configuration Register Write Protection bit
  3525                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3526                           ;	Boot Block Write Protection bit
  3527                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  3528                           ;	Data EEPROM Write Protection bit
  3529                           ;	WRTD = OFF, Data EEPROM not write-protected
  3530   30000B                     	org	3145739
  3531   30000B  E0                 	db	224
  3532                           
  3533                           ;Config register CONFIG7L @ 0x30000C
  3534                           ;	Table Read Protection Block 0
  3535                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  3536                           ;	Table Read Protection Block 1
  3537                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3538                           ;	Table Read Protection Block 2
  3539                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  3540                           ;	Table Read Protection Block 3
  3541                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  3542   30000C                     	org	3145740
  3543   30000C  0F                 	db	15
  3544                           
  3545                           ;Config register CONFIG7H @ 0x30000D
  3546                           ;	Boot Block Table Read Protection bit
  3547                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3548   30000D                     	org	3145741
  3549   30000D  40                 	db	64
  3550                           tosu	equ	0xFFF
  3551                           tosh	equ	0xFFE
  3552                           tosl	equ	0xFFD
  3553                           stkptr	equ	0xFFC
  3554                           pclatu	equ	0xFFB
  3555                           pclath	equ	0xFFA
  3556                           pcl	equ	0xFF9
  3557                           tblptru	equ	0xFF8
  3558                           tblptrh	equ	0xFF7
  3559                           tblptrl	equ	0xFF6
  3560                           tablat	equ	0xFF5
  3561                           prodh	equ	0xFF4
  3562                           prodl	equ	0xFF3
  3563                           indf0	equ	0xFEF
  3564                           postinc0	equ	0xFEE
  3565                           postdec0	equ	0xFED
  3566                           preinc0	equ	0xFEC
  3567                           plusw0	equ	0xFEB
  3568                           fsr0h	equ	0xFEA
  3569                           fsr0l	equ	0xFE9
  3570                           wreg	equ	0xFE8
  3571                           indf1	equ	0xFE7
  3572                           postinc1	equ	0xFE6
  3573                           postdec1	equ	0xFE5
  3574                           preinc1	equ	0xFE4
  3575                           plusw1	equ	0xFE3
  3576                           fsr1h	equ	0xFE2
  3577                           fsr1l	equ	0xFE1
  3578                           bsr	equ	0xFE0
  3579                           indf2	equ	0xFDF
  3580                           postinc2	equ	0xFDE
  3581                           postdec2	equ	0xFDD
  3582                           preinc2	equ	0xFDC
  3583                           plusw2	equ	0xFDB
  3584                           fsr2h	equ	0xFDA
  3585                           fsr2l	equ	0xFD9
  3586                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        4
    BSS         38
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     12      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S600$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    S600$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S635$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    LCD_PutS@_str	PTR unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 

    LCD@_p	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(BITBIGSFRllhl[1]), 

    _port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(BITBIGSFRllhl[1]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_utoa
    _utoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_LCD_PutC
    _LCD_PutC->_WriteByte
    _atoi->___wmul
    _LCD_PutS->_WriteByte
    _LCD_Goto->_WriteByte
    _LCD_Begin->_LCD_Clear
    _LCD_Clear->_WriteByte
    _WriteByte->_WriteNibble
    _WriteNibble->_WritePin
    _EnablePulse->_WritePin

Critical Paths under _main in BANK0

    _main->_printf
    _printf->_vfprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   66101
                                             94 COMRAM     1     1      0
                                             10 BANK0      2     2      0
                                _LCD
                          _LCD_Begin
                          _LCD_Clear
                           _LCD_Goto
                           _LCD_PutC
                           _LCD_PutS
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4   24521
                                             92 COMRAM     2     2      0
                                              6 BANK0      4     0      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   24389
                                             90 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           25    19      6   24028
                                             68 COMRAM    22    16      6
                               _atoi
                              _fputc
                            _isdigit
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                32    22     10   15261
                                             36 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6   14211
                                             25 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    7091
                                             18 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                9     5      4    6690
                                              9 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0    6074
                                              8 COMRAM     1     1      0
                           _LCD_PutC
 ---------------------------------------------------------------------------------
 (9) _LCD_PutC                                             1     1      0    6052
                                              7 COMRAM     1     1      0
                          _WriteByte
                           _WritePin
 ---------------------------------------------------------------------------------
 (5) ___lomod                                             17     1     16     311
                                              0 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (5) ___lodiv                                             25     9     16     314
                                              0 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 9     7      2    1080
                                              6 COMRAM     9     7      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              5     3      2     207
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              4     2      2     237
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _LCD_PutS                                             5     3      2    6196
                                              7 COMRAM     5     3      2
                          _WriteByte
                           _WritePin
 ---------------------------------------------------------------------------------
 (1) _LCD_Goto                                             4     3      1    6368
                                              7 COMRAM     4     3      1
                          _WriteByte
                           _WritePin
 ---------------------------------------------------------------------------------
 (1) _LCD_Begin                                            5     4      1   16202
                                              8 COMRAM     4     3      1
                          _LCD_Clear
                          _WriteByte
                        _WriteNibble
                           _WritePin
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            1     1      0    6030
                                              7 COMRAM     1     1      0
                          _WriteByte
                           _WritePin
 ---------------------------------------------------------------------------------
 (10) _WriteByte                                           1     1      0    4064
                                              6 COMRAM     1     1      0
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (11) _WriteNibble                                         1     1      0    4020
                                              5 COMRAM     1     1      0
                        _EnablePulse
                           _WritePin
 ---------------------------------------------------------------------------------
 (12) _EnablePulse                                         0     0      0    1966
                           _WritePin
 ---------------------------------------------------------------------------------
 (10) _WritePin                                            5     4      1    1966
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (1) _LCD                                                  8     0      8     686
                                              0 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD
   _LCD_Begin
     _LCD_Clear
       _WriteByte
         _WriteNibble
           _EnablePulse
             _WritePin
           _WritePin
       _WritePin
     _WriteByte
     _WriteNibble
     _WritePin
   _LCD_Clear
   _LCD_Goto
     _WriteByte
     _WritePin
   _LCD_PutC
     _WriteByte
     _WritePin
   _LCD_PutS
     _WriteByte
     _WritePin
   _printf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _fputc
           _putch
             _LCD_PutC
         _isdigit
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
             _fputs
               _fputc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      C      3E       5       38.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITBIGSFRllhl       47      0       0      40        0.0%
BITBIGSFRlh         3D      0       0      38        0.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITBIGSFRh          2C      0       0      37        0.0%
BITBIGSFRllhh       11      0       0      39        0.0%
BITBIGSFRlll         3      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9D      28        0.0%
DATA                 0      0      9D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Feb 10 16:44:33 2024

    ___wmul@multiplicand 0003                      l580 1788                      l590 1836  
                    l845 1888                      l918 1512                      l855 1286  
                    l857 128E                      _LCD 1C36                      _pad 1858  
                    wreg 000FE8      __end_of_EnablePulse 1BA0                     ?_LCD 0001  
                   l2001 1422                     l2011 1468                     l2021 14CA  
                   l2013 146E                     l2005 1426                     l2015 1496  
                   l2009 1460                     l2041 105C                     l2203 1A2A  
                   l2051 10A4                     l2107 1A54                     l2061 110E  
                   l2045 1070                     l2109 1A70                     l2063 112C  
                   l2081 1212                     l2049 107A                     l2075 11E4  
                   l2083 1232                     l2067 113A                     l2149 1670  
                   l2181 1960                     l2237 15C6                     l2183 196A  
                   l2087 1242                     l2185 1974                     l2179 1956  
                   l2189 197E                     l2199 1A0C                     l1845 19D2  
                   l1909 1772                     l1925 1820                     l1917 17C4  
                   l1933 1872                     l1919 17D8                     l1943 18AA  
                   l1937 1880                     l1883 1AEE                     l1939 1892  
                   l1869 18F2                     ?_pad 001A                     l1959 1B66  
                   l1879 1AD8                     l1975 12C4                     l1897 1702  
                   l1985 13B0                     l1899 1716                     STR_1 1001  
                   STR_2 100F                     u1100 18EA                     u1120 1932  
                   u1300 127C                     u1141 16E2                     u1160 171A  
                   u1074 19C0                     u1250 1C0A                     u1330 13DA  
                   u1075 19BC                     u1331 13D8                     u1084 19E2  
                   u1260 1C0C                     u1340 13E8                     u1085 19DE  
                   u2117 1580                     u1190 17DC                     u1350 13EE  
                   u2207 1C2A                     u2127 15B4                     u1280 1B62  
                   u1440 1168                     u2217 1B98                     u2137 15F4  
                   u2147 165A                     u1380 14F0                     u2157 167C  
                   u2167 168C                     u2177 169A                     u2187 16A8  
                   u2197 16CA                     _dbuf 0066                     _atoi 1410  
                   _main 151C                     _prec 0062                     pad@i 0021  
                   pad@p 001E                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 0023  
                   fsr2l 000FD9                     _utoa 1268                     prodh 000FF4  
                   prodl 000FF3                     start 0000              LCD_Goto@col 000B  
            LCD_Goto@row 0008             ___param_bank 000000                    ??_LCD 0009  
                  ??_pad 0020                    LCD@d4 0005                    LCD@d5 0006  
                  LCD@d6 0007                    LCD@d7 0008                    LCD@_p 0001  
                  LCD@en 0004                    LCD@rs 0003         __end_of_LCD_Goto 19A8  
       __end_of_LCD_PutC 1C6E         __end_of_LCD_PutS 1A4A                    ?_atoi 0007  
                  ?_main 0001                    ?_utoa 0025          __end_of___lodiv 17AA  
        __end_of___lomod 1858             vfpfcnvrt@fmt 0047                    _PORTD 000F83  
                  _TRISD 000F95                    __port 0092                    _flags 0064  
                  _fputc 18DA                    _fputs 1ACE          __end_of_isdigit 1C12  
                  atoi@n 000E                    pad@fp 001A                    atoi@s 0007  
                  _width 0060                    _putch 1C80                    main@i 005F  
        __end_of_isspace 1B6E                    tablat 000FF5               __XTAL_FREQ 009A  
                  utoa@d 0027                    utoa@i 0043                    utoa@n 003B  
                  utoa@p 0037                    utoa@w 0039                    status 000FD8  
       ___lodiv@dividend 0001          __initialization 1B06             __end_of_atoi 151C  
           __end_of_main 1604             __end_of_utoa 1410              _EnablePulse 1B6E  
                 ??_atoi 0009                   ??_main 0090        __end_of_LCD_Begin 16DC  
                 ??_utoa 002F        __end_of_LCD_Clear 1C36            __activetblptr 000002  
          LCD_Begin@cols 0001         ___lodiv@quotient 0011             LCD_PutS@_str 0008  
                 ?_fputc 000A                   ?_fputs 0013                   ?_putch 0001  
                 _ANSELD 000F3B                   _LCD_D4 0097                   _LCD_D5 0096  
                 _LCD_D6 0095                   _LCD_D7 0094         __end_of_WritePin 19FA  
                 _LCD_EN 0098                   _LCD_RS 0099                   _OSCCON 000FD3  
          vfpfcnvrt@done 0057             vfprintf@cfmt 005B                   ___wmul 1BC8  
              ??___lodiv 0011                ??___lomod 0011                   clear_0 1B2C  
                 isa$std 000001                   _printf 1BA0                   pad@buf 001C  
                 fputc@c 000A                   fputs@c 0017                   fputs@i 0018  
                 fputs@s 0013                ??_isdigit 0003             __mediumconst 0000  
              ??_isspace 0003                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0009         __end_of_vfprintf 1A8E  
                 utoa@fp 0025               __accesstop 0060  __end_of__initialization 1B32  
              ?_LCD_Goto 0008                ?_LCD_PutC 0001                ?_LCD_PutS 0008  
          ___rparam_used 000001           __pcstackCOMRAM 0001                LCD_PutC@c 0008  
              LCD_PutS@i 000C             __pidataBANK0 1C8A            __end_of_fputc 1946  
          __end_of_fputs 1B06            __end_of_putch 1C8A                  ??_fputc 000E  
                ??_fputs 0017                  ??_putch 0009               __pbssBANK0 0060  
         LCD_Begin@lines 0009             WriteNibble@b 0006               ??_LCD_Goto 0009  
           WritePin@_pin 0005               ??_LCD_PutC 0008               ??_LCD_PutS 000A  
             WriteByte@b 0007                  ?___wmul 0001            ??_WriteNibble 0006  
                ?_printf 008C                ?_WritePin 0001        __end_of_WriteByte 1C80  
       ___lomod@dividend 0001                  __Hparam 0000                  __Lparam 0000  
                ___lodiv 16DC                  ___lomod 17AA                ?_vfprintf 0086  
           __psmallconst 1000                  __pcinit 1B06                  __ramtop 1000  
           ?_EnablePulse 0001               ??_WritePin 0002                  __ptext0 151C  
                __ptext1 1BA0                  __ptext2 1A4A                  __ptext3 101A  
                __ptext4 1268                  __ptext5 1858                  __ptext6 1ACE  
                __ptext7 18DA                  __ptext8 1C80                  __ptext9 1C58  
                _isdigit 1BEE      __end_of_WriteNibble 1ACE                  _isspace 1B3C  
        __displaycontrol 0065                _LCD_Begin 1604                _LCD_Clear 1C12  
                atoi@neg 000C     end_of_initialization 1B32                  fputc@fp 000C  
          __Lmediumconst 0000                  fputs@fp 0015        __end_of_vfpfcnvrt 1268  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE         vfpfcnvrt@convarg 004F  
             ??_vfprintf 005B               ?_LCD_Begin 0009               ?_LCD_Clear 0001  
            vfpfcnvrt@ap 0049              _WriteNibble 1A8E              vfpfcnvrt@cp 0059  
            vfpfcnvrt@fp 0045           __end_of___wmul 1BEE           __end_of_printf 1BC8  
    start_initialization 1B06          ___lodiv@divisor 0009              __end_of_LCD 1C58  
        ___lodiv@counter 0019              __end_of_pad 18DA              vfprintf@fmt 0088  
               ??___wmul 0005              __pdataBANK0 009A                 ??_printf 005D  
          __pcstackBANK0 0086              ??_LCD_Begin 000A              ??_LCD_Clear 0008  
              _WriteByte 1C6E                __pnvBANK0 0092              WritePin@val 0001  
               ?___lodiv 0001                 ?___lomod 0001          ___lomod@divisor 0009  
            __smallconst 1000          ___lomod@counter 0011                 ?_isdigit 0001  
               ?_isspace 0001               ?_WriteByte 0001                 _LCD_Goto 1946  
               _LCD_PutC 1C58           ___wmul@product 0005                 _LCD_PutS 19FA  
 LCD_Begin@_function_set 000C                _vfpfcnvrt 101A        ___wmul@multiplier 0001  
              copy_data0 1B1A                 __Hrparam 0000               vfprintf@ap 008A  
               __Lrparam 0000               vfprintf@fp 0086             ?_WriteNibble 0001  
             ?_vfpfcnvrt 0045                 _WritePin 19A8              ??_WriteByte 0007  
               __ptext10 17AA                 __ptext11 16DC                 __ptext20 1C6E  
               __ptext12 1410                 __ptext21 1A8E                 __ptext13 1B3C  
               __ptext22 1B6E                 __ptext14 1BEE                 __ptext23 19A8  
               __ptext15 1BC8                 __ptext24 1C36                 __ptext16 19FA  
               __ptext17 1946                 __ptext18 1604                 __ptext19 1C12  
               isa$xinst 000000                 _vfprintf 1A4A                printf@fmt 008C  
            _isspace$718 0005                 isdigit@c 0001                 isspace@c 0001  
               printf@ap 005D              ??_vfpfcnvrt 004B            ??_EnablePulse 0006  
